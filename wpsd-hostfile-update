#!/bin/bash
#######################################################
#                                                     #
#            Host, TG, and ID DB files Updater        #
#                     by W0CHP                        #
#                                                     #
#######################################################

# --- Configuration ---
script_name=$(basename "$0")
required_uid=0
update_marker_file="/var/run/hostfiles-up"
update_interval_seconds=9000 # 2.5 hours
lock_file="/var/lock/wpsd-hostfiles.lock"
temp_dir="/usr/local/etc/tmp"
install_dir="/usr/local/etc"
checksum_file_remote="hostfile-checksums"
hostfiles_archive_remote="wpsd-hostfiles.tar.bz2"
dmr_id_temp_file="${temp_dir}/user.csv.tmp"
dmr_id_final_file="${install_dir}/user.csv"
stripped_file="${install_dir}/stripped.csv"
groups_file="${install_dir}/groups.txt"

# --- Optional Override Files ---
dmr_hosts_override="/root/DMR_Hosts.txt"
ysf_hosts_override="/root/YSFHosts.txt"
p25_hosts_override="/root/P25Hosts.txt"
m17_hosts_override="/root/M17Hosts.txt"
nxdn_hosts_override="/root/NXDNHosts.txt"
nxdn_hosts_local="${install_dir}/NXDNHostsLocal.txt"
xlx_hosts_override="/root/XLXHosts.txt"

# --- Temporary Files (within temp_dir) ---
checksums_local="${temp_dir}/hostfile-checksums"
hostfiles_archive_local="${temp_dir}/wpsd-hostfiles.tar.bz2"
extracted_base="${temp_dir}"
dextra_hosts_temp="${temp_dir}/DExtra_Hosts.txt"
dmr_id_archive_temp="${temp_dir}/DMRIds.dat.bz2"
dmr_id_raw_temp="${temp_dir}/DMRIds.dat"
dmr_hosts_temp="${temp_dir}/DMR_Hosts.txt"
dplus_hosts_temp="${temp_dir}/DPlus_Hosts.txt"
m17_hosts_temp="${temp_dir}/M17Hosts.txt"
ysf_hosts_temp="${temp_dir}/YSFHosts.txt"
xlx_hosts_temp="${temp_dir}/XLXHosts.txt"
bm_tgs_temp="${temp_dir}/BM_TGs.json"

# --- Version and Diagnostics ---
prog_ver="WPSD-HostFileUpdater v4.5"
opt_into_diags="${OptIntoDiags_value:-true}"

# --- Functions ---
source /usr/local/sbin/.wpsd-common-funcs || {
    echo "Error: Could not source common functions. Exiting."
    exit 1
}

check_root() {
    if [ "$(id -u)" -ne "$required_uid" ]; then
        echo "Error: This script must be run as root" 1>&2
        exit 1
    fi
}

check_opt_in() {
    if [ "$opt_into_diags" != 'true' ]; then
        echo "User has opted out of updates and diagnostics. Exiting..."
        exit 1
    fi
}

check_update_age() {
    if [[ -f "$update_marker_file" && "$FORCE" -ne 1 ]]; then
        local age_seconds="$(( $(date +"%s") - $(stat -c "%Y" "$update_marker_file") ))"
        if [ "$age_seconds" -lt "$update_interval_seconds" ]; then
            echo "Hostfiles are less than $((update_interval_seconds / 3600)).$(((update_interval_seconds % 3600) / 60)) hours old. Not updating."
            echo "To force an update, run 'sudo FORCE=1 $script_name'"
            exit 0
        fi
    fi
}

acquire_lock() {
    exec 200>"$lock_file" || exit 1
    if ! flock -n 200; then
        echo "Error: Process already running"
        exit 1
    fi
}

download_file() {
    local remote_url="$1"
    local local_path="$2"
    echo "Downloading $remote_url to $local_path..."
    curl --fail -L -o "$local_path" -s "$remote_url" --user-agent "$prog_ver"
    if [ $? -ne 0 ]; then
        echo "Error downloading $remote_url"
        exit 1
    fi
}

verify_checksums() {
    echo "Checking file integrities..."
    local checksum_file="$1"
    while IFS=" " read -r expected_checksum filename; do
        local full_path="${extracted_base}/${filename}"
        if [[ ! -f "$full_path" ]]; then
            echo "Error: File $filename not found in $extracted_base"
            exit 1
        fi
        local actual_checksum=$(sha256sum "$full_path" | awk '{print $1}')
        if [[ "$actual_checksum" != "$expected_checksum" ]]; then
            echo "Error: Checksum mismatch for $filename"
            echo "  Expected: $expected_checksum"
            echo "  Actual:   $actual_checksum"
            exit 1
        fi
    done < "$checksum_file"
    echo "Hostfile checksums OK."
}

handle_dmr_ids() {
    echo "Processing DMR IDs..."
    mv "$dmr_id_archive_temp" /tmp/
    bunzip2 -f "/tmp/DMRIds.dat.bz2"
    cat "/tmp/DMRIds.dat" 2>/dev/null |
        grep -v '^#' |
        awk '($1 > 999999) && ($1 < 10000000) { print $0 }' |
        sort -un -k1n -o "$dmr_id_final_file"
    rm -f "/tmp/DMRIds.dat"
}

handle_xlx_overrides() {
    if [ -f "$xlx_hosts_override" ]; then
        echo "Processing XLX overrides..."
        while IFS= read -r line; do
            if [[ "$line" != \#* && "$line" == *";"* ]]; then
                local xlxid=$(echo "$line" | awk -F ';' '{print $1}')
                local xlxip=$(echo "$line" | awk -F ';' '{print $2}')
                local xlxroom=$(echo "$line" | awk -F ';' '{print $3}')
                local xlxNewLine="${xlxid};${xlxip};${xlxroom}"

                if grep -q "^${xlxid};" "$xlx_hosts_temp"; then
                    sed -i "s/^${xlxid};.*/${xlxNewLine}/" "$xlx_hosts_temp"
                else
                    echo "$xlxNewLine" >> "$xlx_hosts_temp"
                fi
            fi
        done < "$xlx_hosts_override"
        sort -o "$xlx_hosts_temp" -t ';' -k1,1 "$xlx_hosts_temp"
    fi
}

commit_files() {
    echo "Updating with new hostfiles..."
    rm -rf "$temp_dir"/*.bz2
    mv "$temp_dir"/* "$install_dir"/
    rm -rf "$stripped_file"
    rm -rf "${install_dir}/stripped.csv"
    ln -s "${install_dir}/user.csv" "${install_dir}/stripped.csv"
    rm -rf "${install_dir}/"*20[2-9][0-9]*
    rm -rf "${install_dir}/sed*"
    touch "$update_marker_file"
}

cleanup_temp() {
    rm -rf "$temp_dir/$checksum_file_remote"
}

remove_old_stripped_files() {
    local pattern="${install_dir}/stripped.csv.*"
    local files=("$pattern")
    if [ "${#files[@]}" -gt 0 ]; then
        for file in "${files[@]}"; do
            rm -f "$file"
        done
    fi
}

# --- Main Script ---
check_root
check_opt_in
check_update_age
acquire_lock

# Connectivity Check
conn_check
if ! "$connection_established"; then
    echo "Error: WPSD Hostfile Update Server connection failed."
    exit 1
fi
echo "WPSD Hostfile Update Server connection OK...downloading hostfiles."

# Create temporary directory if it doesn't exist
mkdir -p "$temp_dir"

# Download checksum and hostfiles archive
download_file "${hostFileURL}/${checksum_file_remote}" "$checksums_local"
download_file "${hostFileURL}/${hostfiles_archive_remote}" "$hostfiles_archive_local"

# Extract archive
echo "Extracting hostfiles..."
tar jxf "$hostfiles_archive_local" -C "$extracted_base"

# Verify checksums
verify_checksums "$checksums_local"

# Handle DExtra Hosts based on /etc/hostfiles.nodextra
if [ -f "/etc/hostfiles.nodextra" ]; then
    echo "Moving XRF hosts to DPlus and non-XRF to DExtra..."
    mv "${extracted_base}/DPlus_WithXRF_Hosts.txt" "$dplus_hosts_temp"
    mv "${extracted_base}/DExtra_NoXRF_Hosts.txt" "$dextra_hosts_temp"
fi

# Get and process DMR IDs
handle_dmr_ids

# BM TG List
cp "$extracted_base/BM_TGs.json" "$groups_file"

# Add DMR Hosts override
if [ -f "$dmr_hosts_override" ]; then
    echo "Appending custom DMR hosts..."
    cat "$dmr_hosts_override" >> "$dmr_hosts_temp"
fi

# Add custom YSF Hosts
if [ -f "$ysf_hosts_override" ]; then
    echo "Appending custom YSF hosts..."
    cat "$ysf_hosts_override" >> "$ysf_hosts_temp"
fi

# Fix DMRGateway issues with parens
if [ -f "/etc/dmrgateway" ]; then
    #echo "Fixing DMRGateway config..."
    sed -i '/Name=.*(/d' /etc/dmrgateway
    sed -i '/Name=.*)/d' /etc/dmrgateway
fi

# Add custom P25 Hosts
if [ -f "$p25_hosts_override" ]; then
    echo "Copying custom P25 hosts..."
    cat "$p25_hosts_override" > "${install_dir}/P25HostsLocal.txt"
fi

# Add local override for M17Hosts
if [ -f "$m17_hosts_override" ]; then
    echo "Appending custom M17 hosts..."
    cat "$m17_hosts_override" >> "$m17_hosts_temp"
fi

# Handle NXDN Hosts
if [ ! -f "$nxdn_hosts_override" ]; then
    touch "$nxdn_hosts_override"
fi
if [ ! -f "$nxdn_hosts_local" ]; then
    touch "$nxdn_hosts_local"
fi
if [ -f "$nxdn_hosts_override" ]; then
    echo "Copying custom NXDN hosts..."
    cat "$nxdn_hosts_override" > "$nxdn_hosts_local"
fi

# Handle XLX overrides
handle_xlx_overrides

# Nextion and LiveCaller DMR ID DB cleanup and link
echo "Finalizing DMR ID database..."
mv "$dmr_id_final_file" "$dmr_id_temp_file"
cat "$dmr_id_temp_file" | sort -un -k1n -o "$dmr_id_final_file"
rm -f "$dmr_id_temp_file"
sed -i '1d' "$dmr_id_final_file"
rm -rf "$stripped_file"
rm -rf "${install_dir}/stripped.csv"
ln -s "${install_dir}/user.csv" "${install_dir}/stripped.csv"

# Commit all files
commit_files

# Cleanup temporary files
cleanup_temp
remove_old_stripped_files

# Final output
if [ -t 1 ]; then
    echo -e "DONE."
else
    echo -e "* DONE *"
fi

exit 0
