#!/bin/bash
#
###############################################################################
#                                                                             #
#                        Pi-Star Auto Update Tool                             #
#                                                                             #
#    Version 3.10.8, Code, Design and Development by Andy Taylor (MW0MWZ)     #
#                            Enhanced by W0CHP                                #
#                                                                             #
#                     Make it simple to update the OS.                        #
#                                                                             #
###############################################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

exec 200>/var/lock/pistar-update.lock || exit 1
if ! flock -n 200 ; then
  echo -e "Another instance is already running...\n"
  exit 1
fi

if [[ ! -f /etc/WPSD-release ]] || [[ $( cat /etc/WPSD-release ) == '69dee892-b82e-400e-b2bd-39e602969e94' ]] ; then
    cat /proc/sys/kernel/random/uuid > /etc/WPSD-release
fi

versionCmd=$( git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git rev-parse --short=10 HEAD )
W0CHP_DASH_BRANCH="$( git --git-dir=/var/www/dashboard/.git branch | grep '*' | awk {'print $2'} )"
W0CHP_BIN_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-bin.git"
OFFICIAL_BIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_v4_Binaries_Bin.git"
uuidStr=$( cat /etc/WPSD-release )
modelName=$(grep -m 1 'model name' /proc/cpuinfo | sed 's/.*: //')
hardwareField=$(grep 'Model' /proc/cpuinfo | sed 's/.*: //')
hwDeetz="${hardwareField} - ${modelName}"

function GetBinStatus() {
    dir="/usr/local/bin"
    repo=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
    if [ "$repo" == "$OFFICIAL_BIN_REPO" ]; then
        echo "1" # bin switch needed
    else
        echo "0" # already on W0CHP bins
    fi
}

function BinRepoSwitch() {
    if [[ $(GetBinStatus) == 1 ]]; then # "1" = bin switch needed
        rm -rf /usr/local/bin
        GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update; BinSwitch) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git clone -q $W0CHP_BIN_REPO /usr/local/bin > /dev/null 2<&1
        checkMMDVMhostINI=$(grep -A 15 "DMR Network" /etc/mmdvmhost | grep -v "DMR Network" | grep -v '^\d*$' | grep "RemoteAddress=127.0.0.1")
        if [[ ! ${checkMMDVMhostINI} ]] ; then
            sed -i '/\[DMR Network\]/a RemoteAddress=127.0.0.1' /etc/mmdvmhost # need this for new conf. dicts.
        fi
    fi
}

git_checkUpdateRequired() {
	# Set the function variables
	gitFolder=${1}
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
	# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, check that branch.
	gitBranch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"

	# Git check / update function
	gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git ls-remote --heads ${gitRemoteURL} | grep ${gitBranch} | awk {'print $1'})
	gitStatusLocal=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git log ${gitBranch} --pretty=tformat:"%H" -1)

	# Return the output
	if [[ ${gitStatusRemote} != ${gitStatusLocal} ]]; then
		echo "1"
	else
		echo "0"
	fi
}

git_update() {
	# Set the function variables
	gitFolder=${1}
	# get proper W0CHP dash branch user is running...
	dash_branch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"

	# Handle the special case for /usr/loca/sbin
	if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
		# Assume unchanged for pistar-upnp.service
		git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git update-index --assume-unchanged pistar-upnp.service
	fi

	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
		echo "Updating ${gitFolder}..."
        	# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
        	if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
                cd ${gitFolder}
                git stash > /dev/null 2<&1 # save user config files: config/config.php config/ircddblocal.php config/language.php
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin ${dash_branch} &> /dev/null
                git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php > /dev/null 2<&1 # restore user config files from stash
                git stash clear > /dev/null 2<&1 # housekeeping
                echo -e "\nChangeLog:\n"
                #git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --decorate=short -n1 | sed -e '1,4d'
                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n1 | cut --complement -d' ' -f1 | fold -w 76 -s
                echo -e "\n"
        	else
			# If this script is updated, re-run the update with the new version.
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
                        	git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard 
                        	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch
                        	if [ "$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git diff --name-only origin/master 2>/dev/null | grep pistar-update 2>/dev/null)" = "pistar-update" ]; then
                                	echo "Found a new version of pistar-update..."
                                	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master &> /dev/null
                                	echo -e "\nChangeLog:\n"
                                	#git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --decorate=short -n1 | sed -e '1,4d'
                                	git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n1 | cut --complement -d' ' -f1 | fold -w 76 -s
                                	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
                                        	echo "Update to new version of pistar-update was not successful, forcing update..."
						if [ -f ${gitFolder}/pistar-upnp.service ]; then
						rm -f ${gitFolder}/pistar-upnp.service
					fi
                                        env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
                                fi
                                echo -e "\n"
                                echo -e "\nRestarting update process with the new version..."
                                exec "$0" "$@"
                                exit 1
                        fi
                fi
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master &> /dev/null
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
                echo -e "\nChangeLog:\n"
                #git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --decorate=short -n1 | sed -e '1,4d'
                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n1 | cut --complement -d' ' -f1 | fold -w 76 -s
                echo -e "\n"
		fi
		# Re-check that the updates are now good
		if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
				rm -rf ${gitFolder}/pistar-upnp.service
			fi
			#echo "Updates were not successful, reverting to Pi-Star original files..."
           		# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
           		if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
               			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/${dash_branch}
           		else
    	    			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
			fi
		fi
                if [[ ${gitFolder} == "/usr/local/.W0CHP_bin" ]]; then
                	echo "Updating W0CHP-PiStar-Dash Custom Binaries (DG-ID_M17 branch)..."
                	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q &> /dev/null
              	fi
               	else
                	echo "No updates for ${gitFolder} available"
	fi
}

main_function() {
	# Make the disk writable and stop cron to prevent it from making it R/O
    	systemctl stop cron.service > /dev/null 2<&1
    	pkill pistar-hourly.cron > /dev/null 2>&1
    	pkill pistar-daily.cron > /dev/null 2>&1
	mount -o remount,rw /
	mount -o remount,rw /boot

	if [ -t 1 ]; then
		# This is running from a terminal, so it should be safe to update the OS
		echo -e "Updating OS...\n"
		apt-get update
		apt-get upgrade --fix-missing --fix-broken -y
		apt-get clean
		echo -e "Done\n"

		echo "Checking nginx config"
		if ! [ $(cat /lib/systemd/system/nginx.service | grep -o "mkdir") ]; then
			sed -i '\/PIDFile=\/run\/nginx.pid/a ExecStartPre=\/bin\/mkdir -p \/var\/log\/nginx' /lib/systemd/system/nginx.service
			systemctl daemon-reload
			systemctl restart nginx.service
			echo "nginx config has been repaired - re-running pistar-update"
			exec "$0" "$@"
			exit 1
		fi
		echo -e "Done\n"
	fi

        # Check for gpsd
	if ! [ -x "$(command -v gpsd)" ]; then
	    echo "GPSd (required) not installed on hotspot. Installing now..."
	    # Install GPSd
	    apt-get -qq install -y libgps-dev gpsd > /dev/null 2>&1
	    systemctl restart gpsd > /dev/null 2>&1
	    systemctl daemon-reload > /dev/null 2>&1
	    echo -e "Done\n"
        fi

	echo "Stopping Services..."
	env REMOUNT_RO="NO" pistar-services fullstop > /dev/null 2>&1
	echo -e "Done\n"

	if [[ $(GetBinStatus) == 1 ]]; then # "1" = bin switch needed
	    echo "New binaries required from W0CHP"
	    echo "Retrieving them now. This will take some time..."
	    BinRepoSwitch
	    echo -e "Done\n"
	fi

	echo "Updating W0CHP-PiStar-Dash Binaries & Scripts..."
	git_update /usr/local/sbin
	systemctl daemon-reload > /dev/null 2>&1
	echo -e "Done\n"

	echo "Updating W0CHP-PiStar-Dash Digital Voice Binaries..."
	git_update /usr/local/bin
	echo -e "Done\n"

	echo "Updating W0CHP-PiStar-Dash Web Dashboard Software..."
	git_update /var/www/dashboard
	echo -e "Done\n"

	echo "Updating Hostfiles, User ID DB's & DMR Talkgroup Lists..."
	/usr/local/sbin/HostFilesUpdate.sh > /dev/null 2>&1
	echo -e "Done\n"

	echo "Updating Pi-Star-Firewall..."
	# check if user already has firewall disabled, and if so, ensure it's kept that way.
	if ! grep -q LOGNDROP /etc/iptables.rules ; then
        	/usr/local/sbin/pistar-system-manager -dfw > /dev/null 2>&1
    	else
        	/usr/local/sbin/pistar-system-manager -efw > /dev/null 2>&1
    	fi
	echo -e "Done\n"

	# New CSS mappings and funcs (git master #e2d2e9d092)...have to reset :-/
	CSS_FILE="/etc/pistar-css.ini"
	if [ -f $CSS_FILE ] && [ ! $( grep 'TextLinkColor' $CSS_FILE) ] ; then
        	echo -e "\n\nNOTE: Custom user CSS detected. Since W0CHP-PiStar-Dash Ver.#e2d2e9d092, the CSS mappings have been updated, and you must. manually edit your custom values again."
        	echo -e "You can reference the customizations you previously had by viewing the file: /etc/.pistar-css.ini.user and then manually re-mapping those values in the Expert CSS Editor Page.\n\n"
        	mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
	fi
	#  in place edit for new mappings
	if [ -f $CSS_FILE ] && [ ! $( grep 'TableBorderColor' $CSS_FILE) ] ; then
        	sed -i '/\[ExtraSettings\]/a TableBorderColor=#777777' $CSS_FILE
		sed -i 's/FontSize=/MainFontSize=/' $CSS_FILE
        	sed -i '/MainFontSize=/a HeaderFontSize=34' $CSS_FILE
	fi

	# Pre-Fix some config in MMDVMHost for update purposes.
	mmdvmHostVer=`MMDVMHost -v | awk '{print $3}' | cut -c 1-8`
	needsUpdate=`grep -c Gwy /etc/mmdvmhost`
	if [ ${mmdvmHostVer} \> 20171031 ] && [ ${needsUpdate} \> 0 ]; then
	        # Config needs to be updated, add in the changes here
	        sed -i "/GwyAddress=/c\\GatewayAddress=127.0.0.1" /etc/mmdvmhost
	        sed -i "/GwyPort=/c\\GatewayPort=4200" /etc/mmdvmhost
	fi
	needsTypeLine=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Type=" | wc -l)
	dmrAddress=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Address=" | awk -F "=" '/Address=/ {print $2}')
	if [ ${needsTypeLine} \< 1 ]; then
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Gateway/g' /etc/mmdvmhost
		else
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Direct/g' /etc/mmdvmhost
		fi
	else
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i "/Type=Dire/c\\Type=Gateway" /etc/mmdvmhost
		else
			sed -i "/Type=Gate/c\\Type=Direct" /etc/mmdvmhost
		fi
	fi

	# Fix up new P25Gateway Config Hostfile setup
	if [[ $(/usr/local/bin/P25Gateway --version | awk '{print $3}' | cut -c -8) -gt "20180108" ]]; then
		sed -i 's/Hosts=\/usr\/local\/etc\/P25Hosts.txt/HostsFile1=\/usr\/local\/etc\/P25Hosts.txt\nHostsFile2=\/usr\/local\/etc\/P25HostsLocal.txt/g' /etc/p25gateway
	fi
	if [ ! -f /root/P25Hosts.txt ]; then
		touch /root/P25Hosts.txt
	fi

	# Fix up new NXDNGateway Config Hostfile setup
	if [[ $(/usr/local/bin/NXDNGateway --version | awk '{print $3}' | cut -c -8) -gt "20180801" ]]; then
		sed -i 's/HostsFile=\/usr\/local\/etc\/NXDNHosts.txt/HostsFile1=\/usr\/local\/etc\/NXDNHosts.txt\nHostsFile2=\/usr\/local\/etc\/NXDNHostsLocal.txt/g' /etc/nxdngateway
	fi
	if [ ! -f /root/NXDNHosts.txt ]; then
		touch /root/NXDNHosts.txt
	fi
	if [ ! -f /usr/local/etc/NXDNHostsLocal.txt ]; then
		touch /usr/local/etc/NXDNHostsLocal.txt
	fi

	# myDV Cast Updates
	#if [[ "$(grep "Special" /etc/pistar-release | awk '{print $3}')" = "myDV_Cast" ]]; then
	#	if [[ !$(grep -i path /etc/bash.bashrc) ]]; then
	#		# Add the new path info because its missing
	#		echo -e "export PATH=/usr/local/bin/castbin:$PATH" >> /etc/bash.bashrc
	#	fi
	#
	#	# Pull the binaries
	#	if [ ! -d /usr/local/bin/castbin ]; then
	#		# No folder, create it
	#		git clone https://github.com/pe1msz/castbin /usr/local/bin/castbin
	#	else
	#		# Update it
	#		git --work-tree=/usr/local/bin/castbin --git-dir=/usr/local/bin/castbin/.git pull origin master
	#	fi
	#
	#	# Pull the Dashboard module
	#	if [ ! -d /var/www/dashboard/admin/modules/castfw ]; then
	#		# No folder, create it
	#		git clone https://github.com/pe1msz/myDV-nano /var/www/dashboard/admin/modules/castfw
	#		ln -s /var/www/dashboard/admin/modules/castfw/fw /var/www/dashboard/admin/castfw
	#		cd /var/www/dashboard/admin/modules/castfw/pyserial-3.2.1
	#		python setup.py install
	#		cd
	#	else
	#		# Update it
	#		git --work-tree=/var/www/dashboard/admin/modules/castfw --git-dir=/var/www/dashboard/admin/modules/castfw/.git pull origin master
	#	fi
	#fi

	# If we are ready to use the new DMRGateway
	if [[ $(/usr/local/bin/DMRGateway --version | awk '{print $3}' | cut -c -8) -gt "20170924" ]] && [[ $(grep -c "\[DMR Network 3\]" /etc/dmrgateway) -eq "1" ]] && [[ ! -f /usr/local/etc/DMR_Audio/no_NO.indx ]]; then
		curl --fail -o /usr/local/etc/DMR_Audio/de_DE.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/de_DE.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/de_DE.indx
		curl --fail -o /usr/local/etc/DMR_Audio/dk_DK.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/dk_DK.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/dk_DK.indx
		curl --fail -o /usr/local/etc/DMR_Audio/en_GB.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_GB.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_GB.indx
		curl --fail -o /usr/local/etc/DMR_Audio/en_US.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_US.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_US.indx
		curl --fail -o /usr/local/etc/DMR_Audio/es_ES.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/es_ES.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/es_ES.indx
		curl --fail -o /usr/local/etc/DMR_Audio/fr_FR.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/fr_FR.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/fr_FR.indx
		curl --fail -o /usr/local/etc/DMR_Audio/it_IT.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/it_IT.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/it_IT.indx
		curl --fail -o /usr/local/etc/DMR_Audio/no_NO.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/no_NO.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/no_NO.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/no_NO.indx
		curl --fail -o /usr/local/etc/DMR_Audio/pl_PL.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pl_PL.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pl_PL.indx
		curl --fail -o /usr/local/etc/DMR_Audio/se_SE.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/se_SE.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/se_SE.indx	
	fi


	# I previously had the wrong URL for the P25 Audio files; remove the broken downloads.
	if [[ -f /usr/local/etc/P25_Audio/en_GB.imbe ]]; then
		testFileIMBE=`file -i /usr/local/etc/P25_Audio/en_GB.imbe | cut -d " " -f2`
		if [[ $testFileIMBE == text* ]]; then
			rm -rf /usr/local/etc/P25_Audio
		fi
	fi

	# Download the correct P25 Audio Files
	if [[ ! -d /usr/local/etc/P25_Audio ]]; then
		echo "Downloading P25 Voice Files..."
		mkdir /usr/local/etc/P25_Audio
		curl --fail -o /usr/local/etc/P25_Audio/de_DE.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/de_DE.imbe
		curl --fail -o /usr/local/etc/P25_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/de_DE.indx
		curl --fail -o /usr/local/etc/P25_Audio/dk_DK.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/dk_DK.imbe
		curl --fail -o /usr/local/etc/P25_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/dk_DK.indx
		curl --fail -o /usr/local/etc/P25_Audio/en_GB.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_GB.imbe
		curl --fail -o /usr/local/etc/P25_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_GB.indx
		curl --fail -o /usr/local/etc/P25_Audio/en_US.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_US.imbe
		curl --fail -o /usr/local/etc/P25_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_US.indx
		curl --fail -o /usr/local/etc/P25_Audio/es_ES.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/es_ES.imbe
		curl --fail -o /usr/local/etc/P25_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/es_ES.indx
		curl --fail -o /usr/local/etc/P25_Audio/fr_FR.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/fr_FR.imbe
		curl --fail -o /usr/local/etc/P25_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/fr_FR.indx
		curl --fail -o /usr/local/etc/P25_Audio/it_IT.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/it_IT.imbe
		curl --fail -o /usr/local/etc/P25_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/it_IT.indx
		curl --fail -o /usr/local/etc/P25_Audio/no_NO.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/no_NO.imbe
		curl --fail -o /usr/local/etc/P25_Audio/no_NO.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/no_NO.indx
		curl --fail -o /usr/local/etc/P25_Audio/pl_PL.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/pl_PL.imbe
		curl --fail -o /usr/local/etc/P25_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/pl_PL.indx
		curl --fail -o /usr/local/etc/P25_Audio/se_SE.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/se_SE.imbe
		curl --fail -o /usr/local/etc/P25_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/se_SE.indx
		echo -e "Done\n"
	fi

	# Download M17 Audio files if missing
	if [[ ! -f /usr/local/etc/M17_Audio/se_SE.indx ]]; then
		mkdir -p /usr/local/etc/M17_Audio/
        	curl --fail -o /usr/local/etc/M17_Audio/de_DE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.m17
        	curl --fail -o /usr/local/etc/M17_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.indx
        	curl --fail -o /usr/local/etc/M17_Audio/dk_DK.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.m17
        	curl --fail -o /usr/local/etc/M17_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.indx
        	curl --fail -o /usr/local/etc/M17_Audio/en_GB.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.m17
        	curl --fail -o /usr/local/etc/M17_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.indx
        	curl --fail -o /usr/local/etc/M17_Audio/en_US.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.m17
        	curl --fail -o /usr/local/etc/M17_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.indx
       		curl --fail -o /usr/local/etc/M17_Audio/es_ES.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.m17
        	curl --fail -o /usr/local/etc/M17_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.indx
        	curl --fail -o /usr/local/etc/M17_Audio/fr_FR.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.m17
        	curl --fail -o /usr/local/etc/M17_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.indx
        	curl --fail -o /usr/local/etc/M17_Audio/it_IT.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.m17
        	curl --fail -o /usr/local/etc/M17_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.indx
        	curl --fail -o /usr/local/etc/M17_Audio/pl_PL.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.m17
        	curl --fail -o /usr/local/etc/M17_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.indx
        	curl --fail -o /usr/local/etc/M17_Audio/se_SE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.m17
        	curl --fail -o /usr/local/etc/M17_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.indx    
    	fi

	if [[ ! -f /usr/local/etc/ircddbgateway/pt_PT.ambe ]]; then
		echo "Downloading Portuguese Voice Files for ircDDBGateway..."
		curl --fail -o /usr/local/etc/ircddbgateway/pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.ambe
		curl --fail -o /usr/local/etc/ircddbgateway/pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.indx
		curl --fail -o /usr/local/etc/ircddbgateway/TIME_pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.ambe
		curl --fail -o /usr/local/etc/ircddbgateway/TIME_pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.indx
		chmod 664 /usr/local/etc/ircddbgateway/*.ambe
		chmod 664 /usr/local/etc/ircddbgateway/*.indx
		echo -e "Done\n"
	fi
	
	if [[ $(grep "\[Voice\]" /etc/p25gateway | wc -l) -eq 0 ]]; then
		echo "Updating P25Gateway config..."
		echo "" >> /etc/p25gateway
		sed -i '$a[Voice]\nEnabled=1\nLanguage=en_GB\nDirectory=/usr/local/etc/P25_Audio\n' /etc/p25gateway
		echo -e "Done\n"
	fi

	if [[ $(grep Version /etc/pistar-release | awk '{print $3}' | cut -c 1) -eq 4 ]]; then
        	if [[ $(cat /etc/ircddbgateway | grep -o "xlx" | wc -l) -eq 0 ]]; then
        	        echo "Adding XLX Config to /etc/ircddbgateway"
        	        echo "xlxEnabled=0" >> /etc/ircddbgateway
        	        echo "xlxHostsFileUrl=http://xlxapi.rlx.lu/api.php?do=GetXLXDMRMaster" >> /etc/ircddbgateway
        	fi

        	#if [[ $(cat /etc/ircddbgateway | grep -o "aprsPassword" | wc -l) -eq 0 ]]; then
        	#        echo "Adding APRS Password to /etc/ircddbgateway"
        	#        echo "aprsPassword=00000" >> /etc/ircddbgateway
        	#fi

		if [[ $(cat /etc/ircddbgateway | grep -o "mobileGPS" | wc -l) -eq 0 ]]; then
                	echo "Adding MobileGPS Config to /etc/ircddbgateway"
                	echo "mobileGPSEnabled=0" >> /etc/ircddbgateway
                	echo "mobileGPSAddress=127.0.0.1" >> /etc/ircddbgateway
                	echo "mobileGPSPort=7834" >> /etc/ircddbgateway
        	fi

		if [[ $(cat /etc/dstarrepeater | grep -o "mmdvmRXInvert" | wc -l) -eq 0 ]]; then
        	        echo "Adding better MMDVM Config to /etc/dstarrepeater"
        	        echo "mmdvmRXInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmTXInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmPTTInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmTXDelay=50" >> /etc/dstarrepeater
        	        echo "mmdvmRXLevel=100" >> /etc/dstarrepeater
        	        echo "mmdvmTXLevel=100" >> /etc/dstarrepeater
        	fi
	fi

	# reinstall/init
	if [[ ! -f /etc/m17gateway ]] ; then
		bash /usr/local/sbin/m17gateway.service install
		touch /etc/m17gateway
	fi

	# reinstall/init
	if [[ ! -f /etc/dgidgateway ]] ; then
		bash /usr/local/sbin/dgidgateway.service install
		touch /etc/dgidgateway
	fi

        if [ -f /usr/local/bin/platformDetect.sh ]; then # remove platformDetect.sh since we have a custom version in /usr/local/sbin
		rm -f /usr/local/bin/platformDetect.sh
        fi

	if ! grep -q TIME_FORMAT /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
		sed -i "/^date_default_timezone_set.*/i define('TIME_FORMAT', '24');" /var/www/dashboard/config/config.php
	fi

	# Add pistar-service bash completion
	DEST="/usr/share/bash-completion/completions/pistar-services"
	if [ ! -f $DEST ] ; then
		echo "#!/bin/bash" > $DEST
		echo "" >> $DEST
		echo "_pistar_services()" >> $DEST
		echo "{" >> $DEST
		echo "    local cur prev words cword" >> $DEST
		echo "    _init_completion -n = || return" >> $DEST
		echo "" >> $DEST
		echo "    _expand || return 0" >> $DEST
		echo "" >> $DEST
		echo "    COMPREPLY=( \$( compgen -W 'start stop restart fullstop status' -- \"\$cur\" ) )" >> $DEST
		echo "" >> $DEST
		echo "} &&" >> $DEST
		echo "complete -F _pistar_services pistar-services" >> $DEST
		echo "" >> $DEST
		chown root:root $DEST
		chmod 0644 $DEST
	fi

	# Get and cache latest W0CHP-PiStar-Dash version from remote Git repo:
	gitFolder="/var/www/dashboard"
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
	gitBranch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"
	gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck Version Cacher (Manual-Update) Ver.#${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git ls-remote --heads ${gitRemoteURL} ${gitBranch} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
	echo ${gitStatusRemote} > /etc/.W0CHP-PiStar-Dash.remote_version

	# Shuffle the time for the next hourly crontab job
	cronMins=$(shuf -i 0-59 -n 1)
	sed -i "/cron.hourly/c ${cronMins}  *   * * *   root    mount -o remount,rw / && cd / && run-parts --report /etc/cron.hourly" /etc/crontab

	# log file perms
	chown -R mmdvm:mmdvm /var/log/pi-star > /dev/null 2>&1
	chmod 775 /var/log/pi-star > /dev/null 2>&1

	echo "Starting Services..."
	pistar-services start > /dev/null 2>&1
	echo -e "Done\n"

	echo "Updates complete, syncing disk cache before making the disk Read-Only"
	# Make the disk read-only
	/bin/sync
	/bin/sync
	/bin/sync
	mount -o remount,ro /
	mount -o remount,ro /boot
	systemctl start cron.service > /dev/null 2<&1
	# Tell the user we are done
	echo "Finished"
	if [ ! -t 1 ]; then
		echo -e "\n<b><a style='color:white;text-decoration:underline;'' href='/config/changelog.php'>See the extended ChangeLog of the last 20 changes...</a></b>\n"
	fi
}

	if [ -t 1 ]; then
 		# run via terminal, only output to screen
 		main_function
	else
 		# if not run via terminal, log everything into a log file
 		main_function >> /var/log/pi-star/pi-star_update.log 2>&1
	fi

exit 0
