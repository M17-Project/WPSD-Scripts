#!/bin/bash
#
###############################################################################
#                                                                             #
#                        Pi-Star Auto Update Tool                             #
#                                                                             #
#      Version 3.14, Code, Design and Development by Andy Taylor (MW0MWZ)     #
#                            Enhanced by W0CHP                                #
#                                                                             #
###############################################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

exec 200>/var/lock/pistar-update.lock || exit 1
if ! flock -n 200 ; then
  echo -e "Another instance is already running...\n"
  exit 1
fi

versionCmd=$( git --work-tree=/usr/local/sbin --git-dir=/usr/local/sbin/.git rev-parse --short=10 HEAD )
psVer=$( grep Version /etc/pistar-release | awk '{print $3}' )
W0CHP_DASH_BRANCH="$( git --git-dir=/var/www/dashboard/.git branch | grep '*' | awk {'print $2'} )"
W0CHP_BIN_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-bin.git"
OFFICIAL_BIN_REPO="https://github.com/AndyTaylorTweet/Pi-Star_v4_Binaries_Bin.git"
SUPPORTING_FILES_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Installer/raw/branch/master/supporting-files"
W0CHP_INSTALL_SCRIPT_REPO="https://repo.w0chp.net/Chipster/W0CHP-PiStar-Installer/raw/branch/master/WPSD-Installer"
uuidStr=$(egrep 'UUID|ModemType|ModemMode|ControllerType' /etc/pistar-release | awk {'print $3'} | tac | xargs| sed 's/ /_/g')
modelName=$(grep -m 1 'model name' /proc/cpuinfo | sed 's/.*: //')
hardwareField=$(grep 'Model' /proc/cpuinfo | sed 's/.*: //')
hwDeetz="${hardwareField} - ${modelName}"
uaStr="WPSD-Update (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]"
uaStrSF="WPSD-SuppFiles (Manual Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]"
TICK="[âœ“]"
INFO="[i]"

# connectivity check
conn_check() {
    echo -e "\nChecking for connectivity to the W0CHP Update Server (can take up to 30 seconds; please wait...)"
    status_code=$(curl -m 30 -A "${uaStr}" --write-out %{http_code} --silent --output /dev/null "https://repo.w0chp.net/Chipster/W0CHP-PiStar-Dash.git/info/refs?service=git-upload-pack")
    if [[ $status_code == 20* ]] || [[ $status_code == 30* ]] ; then
	echo -e "${TICK} Connection established!\n"
    else
	echo -e "[X] Cannot connect to the W0CHP Update Server. Try again later. Exiting...\n"
	exit 1
    fi
}


# ensure repos can be updated
if ! grep -q 'safe' /root/.gitconfig > /dev/null 2<&1 ; then
    git config --global --add safe.directory /var/www/dashboard > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/bin > /dev/null 2<&1
    git config --global --add safe.directory /usr/local/sbin > /dev/null 2<&1
fi
# ensure bullseye uses ff-only for newer git strategy
lsb_release -cs | grep 'bullseye' &> /dev/null
if [ $? == 0 ]; then
    git config --global pull.ff only
fi

# bullseye; change weird interface names* back to what most are accustomed to;
# <https://wiki.debian.org/NetworkInterfaceNames#THE_.22PREDICTABLE_NAMES.22_SCHEME>
OS_VER=$( cat /etc/debian_version | sed 's/\..*//')
if [ "${OS_VER}" -gt "10" ] && [[ ! $(grep "net.ifnames" /boot/cmdline.txt) ]] ; then
    sed -i 's/$/ net.ifnames=0 biosdevname=0/' /boot/cmdline.txt
fi

# migrate config update notice
if grep -q ConfUpdReqd /etc/mmdvmhost ; then
    grep ConfUpdReqd /etc/mmdvmhost | sed 's/=/ = /' >> /etc/pistar-release
    sed -i '/^\[WPSD\]/d' /etc/mmdvmhost
    sed -i '/^ConfUpdReqd/d' /etc/mmdvmhost
else
    if ! grep -q ConfUpdReqd /etc/pistar-release ; then
        echo "ConfUpdReqd = " >> /etc/pistar-release
    fi
fi

# ensure pistar-remote config has key-value pairs for new funcs (12/2/22)
if ! grep -q 'hostfiles=8999995' /etc/pistar-remote ; then 
    sed -i "/^# TG commands.*/a hostfiles=8999995" /etc/pistar-remote
fi
if ! grep -q 'reconnect=8999994' /etc/pistar-remote ; then 
    sed -i "/^# TG commands.*/a reconnect=8999994" /etc/pistar-remote
fi

# watchdog servicee re-init
if systemctl status pistar-watchdog.service | grep -q masked ; then
    systemctl unmask pistar-watchdog.service > /dev/null 2<&1
    systemctl enable pistar-watchdog.service > /dev/null 2<&1
    systemctl start pistar-watchdog.service > /dev/null 2<&1
    systemctl unmask pistar-watchdog.timer > /dev/null 2<&1
    systemctl enable pistar-watchdog.timer > /dev/null 2<&1
    systemctl start pistar-watchdog.timer > /dev/null 2<&1
fi

function GetBinStatus() {
    dir="/usr/local/bin"
    repo=$(git --work-tree=${dir} --git-dir=${dir}/.git config --get remote.origin.url)
    if [ "$repo" == "$OFFICIAL_BIN_REPO" ]; then
        echo "1" # bin switch needed
    else
        echo "0" # already on W0CHP bins
    fi
}

function BinRepoSwitch() {
    if [[ $(GetBinStatus) == 1 ]]; then # "1" = bin switch needed
        rm -rf /usr/local/bin
        GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update; BinSwitch) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git clone -q $W0CHP_BIN_REPO /usr/local/bin > /dev/null 2<&1
        checkMMDVMhostINI=$(grep -A 15 "DMR Network" /etc/mmdvmhost | grep -v "DMR Network" | grep -v '^\d*$' | grep "RemoteAddress=127.0.0.1")
        if [[ ! ${checkMMDVMhostINI} ]] ; then
            sed -i '/\[DMR Network\]/a RemoteAddress=127.0.0.1' /etc/mmdvmhost # need this for new conf. dicts.
        fi
    fi
}

git_checkUpdateRequired() {
	# Set the function variables
	gitFolder=${1}
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
	# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, check that branch.
	gitBranch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"

	# Git check / update function
	gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git ls-remote --heads ${gitRemoteURL} | grep ${gitBranch} | awk {'print $1'})
	gitStatusLocal=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git log ${gitBranch} --pretty=tformat:"%H" -1)

	# Return the output
	if [[ ${gitStatusRemote} != ${gitStatusLocal} ]]; then
		echo "1"
	else
		echo "0"
	fi
}

git_update() {
	# Set the function variables
	gitFolder=${1}
	# get proper W0CHP dash branch user is running...
	dash_branch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"

	# Handle the special case for /usr/loca/sbin
	if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
		# Assume unchanged for pistar-upnp.service
		git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git update-index --assume-unchanged pistar-upnp.service
	fi

	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
		echo "Updating ${gitFolder}..."
        	# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
        	if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
                cd ${gitFolder}
                git stash > /dev/null 2<&1 # save user config files: config/config.php config/ircddblocal.php config/language.php
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin ${dash_branch} &> /dev/null
                git checkout stash@{0} -- config/config.php config/ircddblocal.php config/language.php > /dev/null 2<&1 # restore user config files from stash
                git stash clear > /dev/null 2<&1 # housekeeping
                echo -e "ChangeLog (last 3 changes):"
		echo -e "---------------------------"
                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n3 | cut --complement -d' ' -f1 | fold -w 100 -s
        	else
			# If this script is updated, re-run the update with the new version.
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
                        	git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard 
                        	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git fetch
                        	if [ "$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git diff --name-only origin/master 2>/dev/null | grep pistar-update 2>/dev/null)" = "pistar-update" ]; then
                                	echo -e "\n\nFound a new version of pistar-update..."
                                	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master &> /dev/null
                                	echo -e "ChangeLog (last 3 changes):"
					echo -e "---------------------------"
                                	git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n3 | cut --complement -d' ' -f1 | fold -w 100 -s
                                	if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
                                        	echo "Update to new version of pistar-update was not successful, forcing update..."
						if [ -f ${gitFolder}/pistar-upnp.service ]; then
						rm -f ${gitFolder}/pistar-upnp.service
					fi
                                        env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
                                fi
                                echo -e "\n\n[*] Restarting update process with the new version..."
                                exec "$0" "$@"
                                exit 1
                        fi
                fi
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q origin master &> /dev/null
                env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
                echo -e "ChangeLog (last 3 changes):"
		echo -e "---------------------------"
                git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git --no-pager log --no-decorate --pretty=oneline -n3 | cut --complement -d' ' -f1 | fold -w 100 -s
		fi
		# Re-check that the updates are now good
		if [[ $(git_checkUpdateRequired ${gitFolder}) -gt 0 ]]; then
			if [[ ${gitFolder} == "/usr/local/sbin" ]]; then
				rm -rf ${gitFolder}/pistar-upnp.service
			fi
			#echo "Updates were not successful, reverting to Pi-Star original files..."
           		# W0CHP has more than one branch. So depending on what W0CHP branch the user has installed, pull that branch.
           		if [[ ${gitFolder} == "/var/www/dashboard" ]]; then
               			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/${dash_branch}
           		else
    	    			env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git reset --hard origin/master
			fi
		fi
                if [[ ${gitFolder} == "/usr/local/.W0CHP_bin" ]]; then
                	echo "Updating W0CHP-PiStar-Dash Custom Binaries (DG-ID_M17 branch)..."
                	env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git pull -q &> /dev/null
              	fi
               	else
                	echo -e "${INFO} No updates for ${gitFolder} available"
	fi
}

main_function() {
	# Make the disk writable and stop cron to prevent it from making it R/O
    	systemctl stop cron.service > /dev/null 2<&1
    	pkill pistar-hourly.cron > /dev/null 2>&1
    	pkill pistar-daily.cron > /dev/null 2>&1

	if [ -t 1 ]; then
		# This is running from a terminal, so it should be safe to update the OS
		echo -e "\nChecking for, and applying any available operating system updates..."
		# ensure all proper sec/update repos are defined for bullseye
		lsb_release -cs | grep 'bullseye' &> /dev/null
		if [ $? == 0 ]; then
		    if ! grep -q 'bullseye-security' /etc/apt/sources.list ; then
		        if ! apt-key list | grep -q "Debian Security Archive Automatic Signing Key (11/bullseye)" > /dev/null 2<&1; then
		            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 54404762BBB6E853 > /dev/null 2<&1
		        fi
		        echo "deb http://security.debian.org/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list
		    fi
		    if ! grep -q 'bullseye-updates' /etc/apt/sources.list  ; then
		        if ! apt-key list | grep -q "Debian Archive Automatic Signing Key (11/bullseye)" > /dev/null 2<&1 ; then
		            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0E98404D386FA1D9 > /dev/null 2<&1
		        fi
		        echo "deb http://deb.debian.org/debian bullseye-updates main contrib non-free" >> /etc/apt/sources.list
		    fi
		fi
		apt-get -q=2 update
		if ! apt-get upgrade --dry-run | grep -qo "0 upgraded" ; then
		    echo -e "${INFO} Operating system updates available; installing now..."
		    apt-get upgrade --fix-missing --fix-broken -y
		    apt-get -q=2 autoremove -y
		    apt-get -q=2 clean
		    apt-get -q=2 autoclean
		else
		    echo -e "${INFO} No operating system updates required."
		fi
		# ensure bullseye has proper php extensions
		dpkg --configure -a > /dev/null 2>&1
		lsb_release -cs | grep 'bullseye' &> /dev/null
		if [ $? == 0 ]; then
		    if [ ! -f "/usr/share/php7.4-zip/zip/zip.ini" ] ; then
			echo -e "Installing required 'php-zip' package..."
		        apt-get -q=2 install -y php-zip > /dev/null 2>&1
		        apt-get -q=2 clean > /dev/null 2<&1
		        apt-get -q=2 autoclean > /dev/null 2<&1
		    fi
		fi
		echo -e "${TICK} Done!\n"

		echo "Checking nginx web server configuration"
		if ! [ $(cat /lib/systemd/system/nginx.service | grep -o "mkdir") ]; then
			sed -i '\/PIDFile=\/run\/nginx.pid/a ExecStartPre=\/bin\/mkdir -p \/var\/log\/nginx' /lib/systemd/system/nginx.service
			systemctl daemon-reload
			systemctl restart nginx.service
			echo "nginx configuration has been updated by operating system; restarting update..."
			exec "$0" "$@"
			exit 1
		fi
		echo -e "${TICK} Done!"
	fi

	conn_check
	echo "Stopping Services..."
	# maint. tasks
	/usr/local/sbin/wpsd-backend-maint > /dev/null 2>&1
	pistar-services fullstop > /dev/null 2>&1
	echo -e "${TICK} Done!\n"

	# ensure FS is RW
	touch /root/.WPSD-updating > /dev/null 2>&1
	if [ ! -f /root/.WPSD-updating ] ; then
	    touch /root/.WPSD-updating > /dev/null 2>&1
	    if [ ! -f /root/.WPSD-updating ] ; then
		echo -e "Filesystem could not enter R/W mode...please try updating again.\n"
		exit 1
	    fi
	fi

	if [[ $(GetBinStatus) == 1 ]]; then # "1" = bin switch needed
	    echo "New binaries required from W0CHP"
	    echo "Retrieving them now. This will take some time..."
	    BinRepoSwitch
	    echo -e "${TICK} Done!\n"
	fi

	echo "Updating W0CHP-PiStar-Dash Binaries & Scripts..."
	git_update /usr/local/sbin
	#systemctl daemon-reload > /dev/null 2>&1
	echo -e "${TICK} Done!\n"

	echo "Updating W0CHP-PiStar-Dash Digital Voice Binaries..."
	git_update /usr/local/bin
	echo -e "${TICK} Done!\n"

	echo "Updating W0CHP-PiStar-Dash Web Dashboard Software..."
	git_update /var/www/dashboard
	echo -e "${TICK} Done!\n"

	if ! [ -f /root/M17Hosts.txt ]; then
	    echo -e "# Format: Reflector Name IP Port\n# Example:\n# M17-000    81.231.241.25    17000\n\n" > /root/M17Hosts.txt
	fi
	echo "Updating Hostfiles, User ID DB's & Various Talkgroup Lists..."
	/usr/local/sbin/HostFilesUpdate.sh > /dev/null 2>&1
	echo -e "${TICK} Done!\n"

	echo "Updating Pi-Star-Firewall..."
	# check if user already has firewall disabled, and if so, ensure it's kept that way.
	if ! grep -q LOGNDROP /etc/iptables.rules ; then
        	/usr/local/sbin/pistar-system-manager -dfw > /dev/null 2>&1
    	else
        	/usr/local/sbin/pistar-system-manager -efw > /dev/null 2>&1
    	fi
	echo -e "${TICK} Done!\n"

	echo "Performing maintenance tasks..."

        # Check for gpsd
	systemctl disable mobilegps.timer > /dev/null 2<&1
	systemctl disable mobilegps.service > /dev/null 2<&1
	if compgen -G "/lib/systemd/system/mobilegps*" > /dev/null; then
	    rm -rf /lib/systemd/system/mobilegps*
	fi
	if ! [ -x "$(command -v gpsd)" ]; then
	    echo "GPSd (required) not installed on hotspot. Installing now..."
	    # Install GPSd
	    apt-get -qq update > /dev/null 2>&1
	    apt-get -qq install -y libgps-dev gpsd > /dev/null 2>&1
	    systemctl restart gpsd > /dev/null 2>&1
	    systemctl daemon-reload > /dev/null 2>&1
	    echo -e "${TICK} Done!\n"
        fi

	# check for vnstat
	if ! [ -x "$(command -v vnstat)" ]; then
	    echo "vnstat (required) not installed on hotspot. Installing now..."
	    # Install vnstat
	    apt-get -qq update > /dev/null 2>&1
	    apt-get -qq install -y vnstat > /dev/null 2>&1
	    echo -e "${TICK} Done!\n"
        fi
	# tmpfs for vnstat
	if ! grep -q vnstat /etc/fstab ; then
	    systemctl stop vnstat.service > /dev/null
	    umount /var/lib/vnstat > /dev/null
	    rm -rf /var/lib/vnstat > /dev/null
	    mkdir -p /var/lib/vnstat > /dev/null
	    chown -R vnstat:vnstat /var/lib/vnstat > /dev/null
	    echo "tmpfs                   /var/lib/vnstat         tmpfs   nodev,noatime,nosuid,mode=0755,size=64m         0       0"  >> /etc/fstab
	    mount /var/lib/vnstat > /dev/null
	    chown -R vnstat:vnstat /var/lib/vnstat > /dev/null
	fi
	systemctl restart vnstat.service > /dev/null

	# mmdvmhost log backup services
	if [ ! -f "/lib/systemd/system/mmdvm-log-backup.service" ] ; then
	    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/Build-MMDVM-Log-Systemd-Tasks.sh -o /tmp/Build-MMDVM-Log-Systemd-Tasks.sh
	    bash /tmp/Build-MMDVM-Log-Systemd-Tasks.sh > /dev/null 2<&1
	    rm /tmp/Build-MMDVM-Log-Systemd-Tasks.sh
	fi

	# Setup systemd unit files for Nextion Driver
	#if  [ ! -f "/etc/systemd/system/mmdvmhost.service.requires/nextiondriver.service" ] ; then ## we will use this when line 288 "=1" when we're ready to merge the native nextion support
	if [ ! -f '/lib/systemd/system/nextiondriver.service' ] ; then
	    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service  -o /lib/systemd/system/nextiondriver.service
	    # Enable the NextionDriver service
	    systemctl daemon-reload > /dev/null 2<&1
	    systemctl stop nextiondriver.service > /dev/null 2<&1
	    /usr/bin/killall NextionDriver > /dev/null 2<&1
	    systemctl enable nextiondriver.service > /dev/null 2<&1
	    systemctl restart nextiondriver.service > /dev/null 2<&1
	    systemctl restart mmdvmhost.service > /dev/null 2<&1
	fi
	#if  [ ! -f "/etc/systemd/system/mmdvmhost.service.requires/nextiondriver.service" ] ; then ## we will use this when line 288 "=1" when we're ready to merge the native nextion support
	if [ -f '/lib/systemd/system/nextiondriver.service' ] ; then
	    if ! grep -qo 'killall' /lib/systemd/system/nextiondriver.service ; then
		curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/nextiondriver.service  -o /lib/systemd/system/nextiondriver.service
		systemctl daemon-reload > /dev/null 2<&1
		systemctl stop nextiondriver.service > /dev/null 2<&1
		/usr/bin/killall NextionDriver > /dev/null 2<&1
		systemctl enable nextiondriver.service > /dev/null 2<&1
		systemctl restart nextiondriver.service > /dev/null 2<&1
		systemctl restart mmdvmhost.service > /dev/null 2<&1
	    fi
	fi
	# now, disable nextion driver stuff if it's not config'd in mmdvmhost...
	if [ "`sed -nr "/^\[General\]/,/^\[/{ :l /^\s*[^#].*/ p; n; /^\[/ q; b l; }" /etc/mmdvmhost | grep "Display" | cut -d= -f 2`" != "Nextion" ]; then
	    if grep -qo 'nextiondriver' /lib/systemd/system/mmdvmhost.service ; then
	        sed -i '/nextiondriver/d' /lib/systemd/system/mmdvmhost.service
	        systemctl daemon-reload > /dev/null 2<&1
	    fi
	    systemctl stop nextiondriver.service > /dev/null 2<&1
	    /usr/bin/killall NextionDriver > /dev/null 2<&1
	    systemctl disable nextiondriver.service > /dev/null 2<&1
	    systemctl mask nextiondriver.service > /dev/null 2<&1
	    systemctl daemon-reload > /dev/null 2<&1
	fi

	# m17 service installer bugfix:
	if [ ! -f "/etc/systemd/system/m17gateway.service" ] ; then
	    /usr/local/sbin/m17gateway.service install > /dev/null 2<&1
	    systemctl daemon-reload > /dev/null 2<&1
	fi

	# update installer
	curl -Ls -A "${uaStrSF}" ${W0CHP_INSTALL_SCRIPT_REPO} -o /usr/sbin/WPSD-Installer
	chmod +x /usr/sbin/WPSD-Installer

	# add CallLookupProvider to /etc/pistar-release if not there...
	if ! grep -q 'CallLookupProvider =' /etc/pistar-release ; then
	   sed -i '/ConfUpdReqd/a CallLookupProvider = QRZ' /etc/pistar-release
	fi

	CSS_FILE="/etc/pistar-css.ini"
	# if css does not exist, install default one
	if [ ! -f $CSS_FILE ] ; then
	    curl -Ls -A "${uaStrSF}" $SUPPORTING_FILES_REPO/pistar-css-dist.ini -o /etc/pistar-css.ini
	fi
	# New CSS mappings and funcs (git master #e2d2e9d092)...have to reset :-/
	if [ -f $CSS_FILE ] && [ ! $( grep 'TextLinkColor' $CSS_FILE) ] ; then
        	echo -e "\n\nNOTE: Custom user CSS detected. Since W0CHP-PiStar-Dash Ver.# ${psVer} e2d2e9d092, the CSS mappings have been updated, and you must. manually edit your custom values again."
        	echo -e "You can reference the customizations you previously had by viewing the file: /etc/.pistar-css.ini.user and then manually re-mapping those values in the Expert CSS Editor Page.\n\n"
        	mv /etc/pistar-css.ini /etc/.pistar-css.ini.user
	fi
	#  in place edit for new mappings
	#if [ -f $CSS_FILE ] && [ $( grep 'HeaderFontSize' $CSS_FILE) ] ; then
        	#sed -i '/\[ExtraSettings\]/a TableBorderColor=#777777' $CSS_FILE
		#sed -i 's/FontSize=/MainFontSize=/' $CSS_FILE
        	#sed -i '/MainFontSize=/a HeaderFontSize=34' $CSS_FILE
        #	sed -i '/HeaderFontSize=/a BodyFontSize=17' $CSS_FILE
	#fi
	if [ -f $CSS_FILE ] && ! [ $( grep 'TextSectionColor' $CSS_FILE) ] ; then
        	sed -i '/\[Text\]/a TextSectionColor=#000000' $CSS_FILE
	fi
	# fix css bug derived from editor
	if [ -f $CSS_FILE ] && [ $( grep 'NavPanelColor#edf0f5=' $CSS_FILE) ] ; then
            sed -i 's/NavPanelColor#edf0f5=/NavPanelColor=#edf0f5/g' $CSS_FILE
	fi

	# Pre-Fix some config in MMDVMHost for update purposes.
	mmdvmHostVer=`MMDVMHost -v | awk '{print $3}' | cut -c 1-8`
	needsUpdate=`grep -c Gwy /etc/mmdvmhost`
	if [ ${mmdvmHostVer} \> 20171031 ] && [ ${needsUpdate} \> 0 ]; then
	        # Config needs to be updated, add in the changes here
	        sed -i "/GwyAddress=/c\\GatewayAddress=127.0.0.1" /etc/mmdvmhost
	        sed -i "/GwyPort=/c\\GatewayPort=4200" /etc/mmdvmhost
	fi
	needsTypeLine=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Type=" | wc -l)
	dmrAddress=$(sed -n '/^\[DMR Network\]/,/^\[/p' /etc/mmdvmhost | grep "^Address=" | awk -F "=" '/Address=/ {print $2}')
	if [ ${needsTypeLine} \< 1 ]; then
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Gateway/g' /etc/mmdvmhost
		else
			sed -i 's/\[DMR Network\]/\[DMR Network\]\nType=Direct/g' /etc/mmdvmhost
		fi
	else
		if [[ "${dmrAddress}" == "127.0.0.1" ]]; then
			sed -i "/Type=Dire/c\\Type=Gateway" /etc/mmdvmhost
		else
			sed -i "/Type=Gate/c\\Type=Direct" /etc/mmdvmhost
		fi
	fi

	# Fix up new P25Gateway Config Hostfile setup
	if [[ $(/usr/local/bin/P25Gateway --version | awk '{print $3}' | cut -c -8) -gt "20180108" ]]; then
		sed -i 's/Hosts=\/usr\/local\/etc\/P25Hosts.txt/HostsFile1=\/usr\/local\/etc\/P25Hosts.txt\nHostsFile2=\/usr\/local\/etc\/P25HostsLocal.txt/g' /etc/p25gateway
	fi
	if [ ! -f /root/P25Hosts.txt ]; then
		touch /root/P25Hosts.txt
	fi

	# Fix up new NXDNGateway Config Hostfile setup
	if [[ $(/usr/local/bin/NXDNGateway --version | awk '{print $3}' | cut -c -8) -gt "20180801" ]]; then
		sed -i 's/HostsFile=\/usr\/local\/etc\/NXDNHosts.txt/HostsFile1=\/usr\/local\/etc\/NXDNHosts.txt\nHostsFile2=\/usr\/local\/etc\/NXDNHostsLocal.txt/g' /etc/nxdngateway
	fi
	if [ ! -f /root/NXDNHosts.txt ]; then
		touch /root/NXDNHosts.txt
	fi
	if [ ! -f /usr/local/etc/NXDNHostsLocal.txt ]; then
		touch /usr/local/etc/NXDNHostsLocal.txt
	fi

        # fix timeouts in YSFgateway and P25Gateways (hopes to prevent "Not Linked" dash status when they are indeed linked
        ysfGwToLen=$( grep InactivityTimeout /etc/ysfgateway | awk -F "=" '{print $2}' | wc -m > /dev/null )
        if [[ "${ysfGwToLen}"  -lt "4" ]] ; then
            sed -i "/InactivityTimeout/c\\InactivityTimeout=1440" /etc/ysfgateway
        fi
        p25GwToLen=$( grep InactivityTimeout /etc/p25gateway | awk -F "=" '{print $2}' | wc -m > /dev/null )
        if [[ "${p25GwToLen}"  -lt "4" ]] ; then
            sed -i "/InactivityTimeout/c\\InactivityTimeout=1440" /etc/p25gateway
        fi

	# If we are ready to use the new DMRGateway
	if [[ $(/usr/local/bin/DMRGateway --version | awk '{print $3}' | cut -c -8) -gt "20170924" ]] && [[ $(grep -c "\[DMR Network 3\]" /etc/dmrgateway) -eq "1" ]] && [[ ! -f /usr/local/etc/DMR_Audio/no_NO.indx ]]; then
		curl --fail -o /usr/local/etc/DMR_Audio/de_DE.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/de_DE.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/de_DE.indx
		curl --fail -o /usr/local/etc/DMR_Audio/dk_DK.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/dk_DK.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/dk_DK.indx
		curl --fail -o /usr/local/etc/DMR_Audio/en_GB.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_GB.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_GB.indx
		curl --fail -o /usr/local/etc/DMR_Audio/en_US.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_US.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/en_US.indx
		curl --fail -o /usr/local/etc/DMR_Audio/es_ES.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/es_ES.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/es_ES.indx
		curl --fail -o /usr/local/etc/DMR_Audio/fr_FR.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/fr_FR.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/fr_FR.indx
		curl --fail -o /usr/local/etc/DMR_Audio/it_IT.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/it_IT.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/it_IT.indx
		curl --fail -o /usr/local/etc/DMR_Audio/no_NO.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/no_NO.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/no_NO.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/no_NO.indx
		curl --fail -o /usr/local/etc/DMR_Audio/pl_PL.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pl_PL.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pl_PL.indx
		curl --fail -o /usr/local/etc/DMR_Audio/se_SE.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/se_SE.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/se_SE.indx	
	fi

	# I previously had the wrong URL for the P25 Audio files; remove the broken downloads.
	if [[ -f /usr/local/etc/P25_Audio/en_GB.imbe ]]; then
		testFileIMBE=`file -i /usr/local/etc/P25_Audio/en_GB.imbe | cut -d " " -f2`
		if [[ $testFileIMBE == text* ]]; then
			rm -rf /usr/local/etc/P25_Audio
		fi
	fi

	# Download the correct P25 Audio Files
	if [[ ! -d /usr/local/etc/P25_Audio ]]; then
		echo "Downloading P25 Voice Files..."
		mkdir /usr/local/etc/P25_Audio
		curl --fail -o /usr/local/etc/P25_Audio/de_DE.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/de_DE.imbe
		curl --fail -o /usr/local/etc/P25_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/de_DE.indx
		curl --fail -o /usr/local/etc/P25_Audio/dk_DK.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/dk_DK.imbe
		curl --fail -o /usr/local/etc/P25_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/dk_DK.indx
		curl --fail -o /usr/local/etc/P25_Audio/en_GB.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_GB.imbe
		curl --fail -o /usr/local/etc/P25_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_GB.indx
		curl --fail -o /usr/local/etc/P25_Audio/en_US.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_US.imbe
		curl --fail -o /usr/local/etc/P25_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/en_US.indx
		curl --fail -o /usr/local/etc/P25_Audio/es_ES.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/es_ES.imbe
		curl --fail -o /usr/local/etc/P25_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/es_ES.indx
		curl --fail -o /usr/local/etc/P25_Audio/fr_FR.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/fr_FR.imbe
		curl --fail -o /usr/local/etc/P25_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/fr_FR.indx
		curl --fail -o /usr/local/etc/P25_Audio/it_IT.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/it_IT.imbe
		curl --fail -o /usr/local/etc/P25_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/it_IT.indx
		curl --fail -o /usr/local/etc/P25_Audio/no_NO.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/no_NO.imbe
		curl --fail -o /usr/local/etc/P25_Audio/no_NO.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/no_NO.indx
		curl --fail -o /usr/local/etc/P25_Audio/pl_PL.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/pl_PL.imbe
		curl --fail -o /usr/local/etc/P25_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/pl_PL.indx
		curl --fail -o /usr/local/etc/P25_Audio/se_SE.imbe -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/se_SE.imbe
		curl --fail -o /usr/local/etc/P25_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/P25Clients/master/P25Gateway/Audio/se_SE.indx
		echo -e "${TICK} Done!\n"
	fi

	# Download M17 Audio files if missing
	if [[ ! -f /usr/local/etc/M17_Audio/se_SE.indx ]]; then
		mkdir -p /usr/local/etc/M17_Audio/
        	curl --fail -o /usr/local/etc/M17_Audio/de_DE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.m17
        	curl --fail -o /usr/local/etc/M17_Audio/de_DE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/de_DE.indx
        	curl --fail -o /usr/local/etc/M17_Audio/dk_DK.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.m17
        	curl --fail -o /usr/local/etc/M17_Audio/dk_DK.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/dk_DK.indx
        	curl --fail -o /usr/local/etc/M17_Audio/en_GB.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.m17
        	curl --fail -o /usr/local/etc/M17_Audio/en_GB.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_GB.indx
        	curl --fail -o /usr/local/etc/M17_Audio/en_US.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.m17
        	curl --fail -o /usr/local/etc/M17_Audio/en_US.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/en_US.indx
       		curl --fail -o /usr/local/etc/M17_Audio/es_ES.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.m17
        	curl --fail -o /usr/local/etc/M17_Audio/es_ES.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/es_ES.indx
        	curl --fail -o /usr/local/etc/M17_Audio/fr_FR.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.m17
        	curl --fail -o /usr/local/etc/M17_Audio/fr_FR.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/fr_FR.indx
        	curl --fail -o /usr/local/etc/M17_Audio/it_IT.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.m17
        	curl --fail -o /usr/local/etc/M17_Audio/it_IT.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/it_IT.indx
        	curl --fail -o /usr/local/etc/M17_Audio/pl_PL.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.m17
        	curl --fail -o /usr/local/etc/M17_Audio/pl_PL.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/pl_PL.indx
        	curl --fail -o /usr/local/etc/M17_Audio/se_SE.m17 -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.m17
        	curl --fail -o /usr/local/etc/M17_Audio/se_SE.indx -s https://raw.githubusercontent.com/g4klx/M17Gateway/master/Audio/se_SE.indx    
    	fi

	# Add Portuguese voice files for DMRGateway
	if [[ ! -f /usr/local/etc/DMR_Audio/pt_PT.ambe ]]; then
		echo "Downloading Portuguese Voice Files for DMRGateway..."
		curl --fail -o /usr/local/etc/DMR_Audio/pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pt_PT.ambe
		curl --fail -o /usr/local/etc/DMR_Audio/pt_PT.indx -s https://raw.githubusercontent.com/g4klx/DMRGateway/master/Audio/pt_PT.indx
		chmod 664 /usr/local/etc/DMR_Audio/*.ambe
		chmod 664 /usr/local/etc/DMR_Audio/*.indx
		echo "Done"
	fi

	if [[ ! -f /usr/local/etc/ircddbgateway/pt_PT.ambe ]]; then
		echo "Downloading Portuguese Voice Files for ircDDBGateway..."
		curl --fail -o /usr/local/etc/ircddbgateway/pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.ambe
		curl --fail -o /usr/local/etc/ircddbgateway/pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/pt_PT.indx
		curl --fail -o /usr/local/etc/ircddbgateway/TIME_pt_PT.ambe -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.ambe
		curl --fail -o /usr/local/etc/ircddbgateway/TIME_pt_PT.indx -s https://raw.githubusercontent.com/g4klx/ircDDBGateway/master/Data/TIME_pt_PT.indx
		chmod 664 /usr/local/etc/ircddbgateway/*.ambe
		chmod 664 /usr/local/etc/ircddbgateway/*.indx
		echo -e "${TICK} Done!\n"
	fi
	
	if [[ $(grep "\[Voice\]" /etc/p25gateway | wc -l) -eq 0 ]]; then
		echo "Updating P25Gateway config..."
		echo "" >> /etc/p25gateway
		sed -i '$a[Voice]\nEnabled=1\nLanguage=en_GB\nDirectory=/usr/local/etc/P25_Audio\n' /etc/p25gateway
		echo -e "${TICK} Done!\n"
	fi

	if [[ $(grep Version /etc/pistar-release | awk '{print $3}' | cut -c 1) -eq 4 ]]; then
        	if [[ $(cat /etc/ircddbgateway | grep -o "xlx" | wc -l) -eq 0 ]]; then
        	        echo "Adding XLX Config to /etc/ircddbgateway"
        	        echo "xlxEnabled=0" >> /etc/ircddbgateway
        	        echo "xlxHostsFileUrl=http://xlxapi.rlx.lu/api.php?do=GetXLXDMRMaster" >> /etc/ircddbgateway
        	fi

        	#if [[ $(cat /etc/ircddbgateway | grep -o "aprsPassword" | wc -l) -eq 0 ]]; then
        	#        echo "Adding APRS Password to /etc/ircddbgateway"
        	#        echo "aprsPassword=00000" >> /etc/ircddbgateway
        	#fi

		if [[ $(cat /etc/ircddbgateway | grep -o "mobileGPS" | wc -l) -eq 0 ]]; then
                	echo "Adding MobileGPS Config to /etc/ircddbgateway"
                	echo "mobileGPSEnabled=0" >> /etc/ircddbgateway
                	echo "mobileGPSAddress=127.0.0.1" >> /etc/ircddbgateway
                	echo "mobileGPSPort=7834" >> /etc/ircddbgateway
        	fi

		if [[ $(cat /etc/dstarrepeater | grep -o "mmdvmRXInvert" | wc -l) -eq 0 ]]; then
        	        echo "Adding better MMDVM Config to /etc/dstarrepeater"
        	        echo "mmdvmRXInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmTXInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmPTTInvert=0" >> /etc/dstarrepeater
        	        echo "mmdvmTXDelay=50" >> /etc/dstarrepeater
        	        echo "mmdvmRXLevel=100" >> /etc/dstarrepeater
        	        echo "mmdvmTXLevel=100" >> /etc/dstarrepeater
        	fi
	fi

        if [ -f /usr/local/bin/platformDetect.sh ]; then # remove platformDetect.sh since we have a custom version in /usr/local/sbin
		rm -f /usr/local/bin/platformDetect.sh
        fi

	if ! grep -q TIME_FORMAT /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
		sed -i "/^date_default_timezone_set.*/i define('TIME_FORMAT', '24');" /var/www/dashboard/config/config.php
	fi

	if ! grep -q AUTO_UPDATE_CHECK /var/www/dashboard/config/config.php ; then # insert req'd constant if not found. WIll be stashed on next update :-)
		sed -i "/^date_default_timezone_set.*/i define('AUTO_UPDATE_CHECK', 'true');" /var/www/dashboard/config/config.php
	fi

        # cleanup legacy naming convention
        if grep -q 'modemcache' /etc/rc.local ; then
            sed -i 's/modemcache/hwcache/g' /etc/rc.local
	    sed -i 's/# cache modem info/# cache hw info/g' /etc/rc.local 
        fi
	# add hw cache to rc.local
	if ! grep -q 'hwcache' /etc/rc.local ; then
    	    sed -i '/^\/usr\/local\/sbin\/pistar-motdgen/a \\n\n# cache hw info\n\/usr\/local\/sbin\/pistar-hwcache' /etc/rc.local 
	    /usr/local/sbin/pistar-hwcache
	else
	    /usr/local/sbin/pistar-hwcache
	fi

	# MOTD
	bash /usr/local/sbin/pistar-motdgen

	# Add pistar-service bash completion
	DEST="/usr/share/bash-completion/completions/pistar-services"
	if [ ! -f $DEST ] ; then
		echo "#!/bin/bash" > $DEST
		echo "" >> $DEST
		echo "_pistar_services()" >> $DEST
		echo "{" >> $DEST
		echo "    local cur prev words cword" >> $DEST
		echo "    _init_completion -n = || return" >> $DEST
		echo "" >> $DEST
		echo "    _expand || return 0" >> $DEST
		echo "" >> $DEST
		echo "    COMPREPLY=( \$( compgen -W 'start stop restart fullstop status' -- \"\$cur\" ) )" >> $DEST
		echo "" >> $DEST
		echo "} &&" >> $DEST
		echo "complete -F _pistar_services pistar-services" >> $DEST
		echo "" >> $DEST
		chown root:root $DEST
		chmod 0644 $DEST
	fi

	# Get and cache latest W0CHP-PiStar-Dash version from remote Git repo:
	gitFolder="/var/www/dashboard"
	gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
	gitBranch="$( git --git-dir=${gitFolder}/.git branch | grep '*' | awk {'print $2'} )"
	gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck Version Cacher (Manual-Update) Ver.# ${psVer} ${versionCmd} (${W0CHP_DASH_BRANCH}) UUID:${uuidStr} [${hwDeetz}]" git ls-remote --heads ${gitRemoteURL} ${gitBranch} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
	echo ${gitStatusRemote} > /etc/.W0CHP-PiStar-Dash.remote_version

	# log file perms
	chown -R mmdvm:mmdvm /var/log/pi-star > /dev/null 2>&1
	chmod 775 /var/log/pi-star > /dev/null 2>&1

	# run any slipstream tasks
	bash /usr/local/sbin/slipstream-tasks.sh > /dev/null 2>&1

	echo -e "${TICK} Done!\n"

	echo "Starting Services..."
	# re-sec. nginx after interrupted installation
	sed -i '/satisfy any/d' /etc/nginx/sites-enabled/pi-star
	sed -i '/allow 127.0.0.1/d' /etc/nginx/sites-enabled/pi-star
	sed -i '/deny all/d' /etc/nginx/sites-enabled/pi-star
	systemctl restart nginx > /dev/null 2<&1
	pistar-services start > /dev/null 2>&1
	echo -e "${TICK} Done!\n"

	echo "Updates complete, syncing disk cache..."
	rm /root/.WPSD-updating > /dev/null 2>&1
	/bin/sync
	/bin/sync
	/bin/sync
	systemctl start cron.service > /dev/null 2<&1
	echo -e "${TICK} Finished!"
	if [ ! -t 1 ]; then # only output if not called from tty
		echo -e "\n<b><a style='color:white;text-decoration:underline;'' href='/config/changelog.php'>See the extended ChangeLog of the last 20 changes...</a></b>\n"
	fi
}

	if [ -t 1 ]; then
 		# run via terminal, only output to screen
 		main_function
	else
 		# if not run via terminal, log everything into a log file
 		main_function >> /var/log/pi-star/pi-star_update.log 2>&1
	fi

exit 0
