#!/bin/bash
#
###############################################################################
#                                                                             #
#                     Pi-Star Firmware Downgrade Tool                         #
#                                                                             #
#    Version 0.4, Code, Design and Development by Florian Wolters (DF2ET).    #
#                     Idea by Stefan Espringal (DL1BH)                        #
#                                                                             #
#                  Based on work by Andy Taylor (MW0MZW)                      #
#                            Andy Uribe CA6JAU                                #
#                           Chip Cuccio (W0CHP)                               #
#                                                                             #
#               Make it simple to downgrade the Firmware                      #
#                                                                             #
###############################################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi
#

#
# Output some useful information when no variables are passed
#
if [ -z "$1" ]
then
  clear
  echo ""
  echo "This tool is used to downgrade the firmware of your MMDVM_HS Hat Modem"
  echo "to use the command, you will need to specify your modem type..."
  echo "please choose from the list below..."
  echo ""
  echo "To downgrade HS_HAT (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatdowngrade hs_hat"
  echo "To downgrade HS_HAT (12.288MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatdowngrade hs_hat-12mhz"
  echo "To downgrade HS_DUAL_HAT (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatdowngrade hs_dual_hat"
  echo "To downgrade HS_DUAL_HAT (12.2880MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatdowngrade hs_dual_hat-12mhz"
  echo ""
  echo "IMPORTANT: Please note, that we are not firmware developers, and we offer no support for firmware."
  echo "We simply provide scripts to update the firmware. For actual firmware support,"
  echo "you will need to utilize other support resources from the firmware developers/maintainers or the web".
  echo ""
  # Get the pretty name for the chosen Modem according to the dashboard.
  if [ -f '/etc/dstar-radio.mmdvmhost' ]; then
    modemSelected=$(grep 'Hardware=' /etc/dstar-radio.mmdvmhost)
    modemSelected=${modemSelected#*=}

    # Get the user-friendly version of the selected Modem.
    modemSelectedHuman=$(grep value=\"${modemSelected}\" /var/www/dashboard/admin/configure.php | head -n 1)
    modemSelectedHuman=${modemSelectedHuman#*\">}
    modemSelectedHuman=${modemSelectedHuman::-9}

    # Replace "&amp;" with "&" in modemSelectedHuman
    modemSelectedHuman=${modemSelectedHuman//&amp;/&}

    echo "Selected Modem:     ${modemSelectedHuman}"
  fi

  # Get the Modem info from the Log
  numLogs=$(ls -1rt /var/log/pi-star/MMDVM-*.log | wc -l)
  if [[ ${numLogs} -gt 0 ]]; then
    # Get the physically connected modem from the logs
    modemLog=$(tac $(ls -1rt /var/log/pi-star/MMDVM-*.log) | sed -n 's/description: /&\n/;s/.*\n//p' | head -1)
    echo "Connected Hardware: ${modemLog}"

    # Get the TCXO data
    if [[ ${modemLog} == *"MHz"* ]]; then
      tcxoData=$(echo ${modemLog} | awk '{print $3}')
      echo "TCXO Value:         ${tcxoData}"
    fi
  fi
  exit 0
fi
#
# OK we know what the modem is, let get the firmware string from the log...
#
tac $(ls -1rt /var/log/pi-star/MMDVM-*.log | tail -n1 ) | grep "protocol" -m 1 | sed -n 's/description: /&\n/;s/.*\n//p'
read -n 1 -s -r -p "Press any key to downgrade the ${1} firmware on this modem or Ctrl-C to quit..."
echo ""

# Get all releases and let the user choose or check if seconad command line option is a valid version tag
#
# API URL
API_URL="https://wpsd-swd.w0chp.net/api/v1/repos/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/tags"

script_name=$(basename "$0")
UAstr="WPSD Modem FW Update Invocation (client side: $script_name)"

# Get all tags from the API and store them in an array
mapfile -t VERSIONS < <(curl -L -A "$UAstr" -s "$API_URL" | jq -r '.[].name')

# Check if a version tag is provided as the second command line argument
if [ "$2" ]; then
   VERSION="$2"

   # Check if the provided tag is in the list of tags
   if [[ " ${VERSIONS[@]} " =~ " $VERSION " ]]; then
      echo "Selected version: $VERSION"
      # Perform your desired action with the selected version here
   else
      echo "Invalid version: $VERSION"
   fi
else
   # List available versions for the user to choose from
   echo "Available versions:"
   I=1
   for version in "${VERSIONS[@]}"; do
      echo "${I}) $version"
      I=$((I + 1))
   done

   # Prompt the user to choose a version
   echo ""
   echo -n "Please enter the line number of the version you want to select or \"q\" to abort and press [ENTER]: "
   read CHOICE
   echo ""
   if [ "$CHOICE" == "q" -o "$CHOICE" == "Q" ]; then
      echo "Aborted."
      exit 1
   elif [ $CHOICE -ge 1 -a $CHOICE -le ${#VERSIONS[@]} ]; then
      echo "Your choice: ${CHOICE} (${VERSIONS[(($CHOICE - 1))]})"
      echo ""
      VERSION="${VERSIONS[(($CHOICE - 1))]}"
      
      # Download the correct firmware based on the selected version and perform actions
      # Trim any leading or trailing whitespace from VERSION
      VERSION=$(echo "$VERSION" | tr -d '[:space:]')
      BASE_FW_URL="https://wpsd-swd.w0chp.net/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/raw/tag/${VERSION}/scripts"
      case ${1} in
         hs_hat)
            # Flashing MMDVM_HS Hat Modem
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            mkdir /tmp/mmdvmhshatfirmware 2> /dev/null
            echo "Flashing your ${1} modem to version ${VERSION}"
	    curl -L -s -A "$UAstr" -o /tmp/mmdvmhshatfirmware/flash.sh "$BASE_FW_URL/install_fw_hshat.sh"
            chmod +x /tmp/mmdvmhshatfirmware/flash.sh
            cd  /tmp/mmdvmhshatfirmware
            ./flash.sh
            echo ""
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            read -n 1 -s -r -p "Flashing your ${1} modem complete, press any key to reboot your WPSD system..."
            shutdown -r now
            exit 0
         ;;
         hs_hat-12mhz)
            # Flashing MMDVM_HS Hat Modem with 12.288 MHz TCXO
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            mkdir /tmp/mmdvmhshatfirmware 2> /dev/null
            echo "Flashing your ${1} modem to the ${VERSION} version"
	    curl -L -s -A "$UAstr" -o /tmp/mmdvmhshatfirmware/flash.sh "$BASE_FW_URL/nstall_fw_hshat-12mhz.sh"
            chmod +x /tmp/mmdvmhshatfirmware/flash.sh
            cd  /tmp/mmdvmhshatfirmware
            ./flash.sh
            echo ""
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            read -n 1 -s -r -p "Flashing your ${1} modem complete, press any key to reboot your WPSD system..."
            shutdown -r now
            exit 0
         ;;
         hs_dual_hat)
            # Flashing MMDVM_HS_DUAL Modem
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            mkdir /tmp/mmdvmhshatfirmware 2> /dev/null
            echo "Flashing your ${1} modem to the ${VERSION} version"
	    curl -L -s -A "$UAstr" -o /tmp/mmdvmhshatfirmware/flash.sh "$BASE_FW_URL/install_fw_hsdualhat.sh"
            chmod +x /tmp/mmdvmhshatfirmware/flash.sh
            cd  /tmp/mmdvmhshatfirmware
            ./flash.sh
            echo ""
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            read -n 1 -s -r -p "Flashing your ${1} modem complete, press any key to reboot your WPSD system..."
            shutdown -r now
            exit 0
         ;;
         hs_dual_hat-12mhz)
            # Flashing MMDVM_HS_DUAL Modem with 12.288 MHz TCXO
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            mkdir /tmp/mmdvmhshatfirmware 2> /dev/null
            echo "Flashing your ${1} modem to the ${VERSION} version"
	    curl -L -s -A "$UAstr" -o /tmp/mmdvmhshatfirmware/flash.sh "$BASE_FW_URL/install_fw_hsdualhat-12mhz.sh"
            chmod +x /tmp/mmdvmhshatfirmware/flash.sh
            cd  /tmp/mmdvmhshatfirmware
            ./flash.sh
            echo ""
            rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
            read -n 1 -s -r -p "Flashing your ${1} modem complete, press any key to reboot your WPSD system..."
            shutdown -r now
            exit 0
         ;;
         *)
            # Un-recognised modem choice
            echo "Your Choice of ${1} modem is not supported by this update tool"
            exit 1
         ;;
      esac
   else
      echo "Invalid choice. Aborting ..."
      exit 2
   fi

fi
exit 2
