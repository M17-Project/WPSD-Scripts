#!/bin/bash
#
#########################################################
#                                                       #
#            WPSD Modem Firmware Update Utility         #
#                  Chip Cuccio (W0CHP)                  #
#                                                       #
#########################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

# Check CLI arguments and determine the modem type and its respective FW file...
if [ "$1" ]; then
  case $1 in
    hs_hat)
      firmware_file="mmdvm_hs_hat_fw.bin"
      ;;
    hs_hat-12mhz)
      firmware_file="mmdvm_hs_hat_fw-12mhz.bin"
      ;;
    hs_dual_hat)
      firmware_file="mmdvm_hs_dual_hat_fw.bin"
      ;;
    hs_dual_hat-12mhz)
      firmware_file="mmdvm_hs_dual_hat_fw-12mhz.bin"
      ;;
    hs_hat_ambe)
      firmware_file="d2rg_mmdvm_hs.bin"
      ;;
    hs_hat_generic)
      firmware_file="generic_gpio_fw.bin"
      ;;
    hs_hat_generic_duplex)
      firmware_file="generic_duplex_gpio_fw.bin"
      ;;
    hs_hat_generic_duplex-usb)
      firmware_file="generic_duplex_usb_fw.bin"
      ;;
    hs_hat_nano_hotspot)
      firmware_file="nano_hotspot_fw.bin"
      ;;
    hs_hat_lonestar)
      firmware_file="lonestar_usb_fw.bin"
      ;;

    *)
      echo "Your choice of the modem, '${1}', is not supported in this program."
      exit 1
      ;;
  esac
fi

# set some pretty colors
if [[ ${SUPP_COL} -eq 0 ]]; then
    COL_NC='\e[0m' # No Color
    BOLD='\e[1m'
    REVERSE='\e[7m'
    COL_LIGHT_GREEN='\e[1;32m'
    COL_BRIGHT_GREEN='\e[1;92m'
    COL_LIGHT_RED='\e[31m'
    COL_BRIGHT_RED='\e[1;31m'
    COL_LIGHT_CYAN='\e[1;36m'
    COL_REG_CYAN='\e[38;5;30m'
    COL_REG_ORANGE='\e[38;5;173m'
    COL_LIGHT_ORANGE='\e[38;5;208m'
    COL_LIGHT_BLUE='\e[1;34m'
    COL_LIGHT_MAGENTA='\e[1;35m'
    COL_LIGHT_YELLOW='\e[1;93m'
    COL_REG_YELLOW='\e[93m'
    INFO="${BOLD}[i]${COL_NC}"
    NOTE="${BOLD}[${COL_LIGHT_YELLOW}!${COL_NC}]"
    TICK="${BOLD}[${COL_LIGHT_GREEN}✓${COL_NC}]"
    CROSS="${BOLD}[${COL_BRIGHT_RED}✗${COL_NC}]"
    DONE="${BOLD}${COL_LIGHT_GREEN}Done!${COL_NC}"
else
    INFO="[i]"
    NOTE="[!]"
    TICK="[✓]"
    CROSS="[✗]"
    DONE="Done!"
fi

# some flashy flashing status while the modem flashes ;)
# Add these variables to define the spinner
SPINNER_PID=
SPINNER_CHARS="/-\|"

# Function to display a spinner
spinner() {
    local i=0
    while :; do
        printf "    [${SPINNER_CHARS:$i:1}] Flashing modem firmware... \r"
        i=$(( (i + 1) % 4 ))
        sleep 0.1
    done
}

#
# Output some useful information when no variables are passed
#
if [ -z "$1" ]
then
  clear
  echo -e "${NOTE} ${COL_LIGHT_YELLOW}Note:${COL_NC} No modem specified!"
  echo ""
  echo "This tool is used to flash/upgrade your MMDVM_HS Hat Modem"
  echo "To use the command, you will need to specify your modem type..."
  echo "Please choose from the list below, and run the command again:"
  echo ""
  echo "To flash HS_HAT (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_hat"
  echo "To flash HS_HAT (12.2880MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_hat-12mhz"
  echo "To flash HS_DUAL_HAT (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_dual_hat"
  echo "To flash HS_DUAL_HAT (12.2880MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_dual_hat-12mhz"
  echo "To flash HS_HAT_AMBE (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_hat_ambe"
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""
  echo "If you have a different modem..."
  echo ""
  echo "	To flash ZUMspot devices, run: pistar-zumspotflash"
  echo "	To flash BridgeCom SkyBridge devices, run: pistar-skybridgeflash"
  echo "	To flash NANO_DV devices, run: pistar-nanodvflash"
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""
  echo "To DOWNGRADE your MMDVM_HS Hat Modem firmware to an older version..."
  echo ""
  echo "	run: pistar-mmdvmhshatdowngrade"
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""
  echo "IMPORTANT: Please note, that we are not firmware developers, and we offer no support for firmware."
  echo "We simply provide scripts to update the firmware. For actual firmware support,"
  echo "you will need to utilize other support resources from the firmware developers/maintainers or the web".
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""

  # Get the friendly name for the chosen Modem according to the dashboard.
  if [ -f '/etc/dstar-radio.mmdvmhost' ]; then
    modemSelected=$(grep 'Hardware=' /etc/dstar-radio.mmdvmhost)
    modemSelected=${modemSelected#*=}

    # Get the user-friendly version of the selected Modem.
    modemSelectedHuman=$(grep value=\"${modemSelected}\" /var/www/dashboard/admin/configure.php | head -n 1)
    modemSelectedHuman=${modemSelectedHuman#*\">}
    modemSelectedHuman=${modemSelectedHuman::-9}

    # Replace "&amp;" with "&" in modemSelectedHuman
    modemSelectedHuman=${modemSelectedHuman//&amp;/&}

    echo "Modem selected in Dashboard: ${modemSelectedHuman}"
  fi

  # Get the Modem info from the Log
  numLogs=$(ls -1rt /var/log/pi-star/MMDVM-*.log | wc -l)
  if [[ ${numLogs} -gt 0 ]]; then
    # Get the physically connected modem from the logs
    modemLog=$(tac $(ls -1rt /var/log/pi-star/MMDVM-*.log) | sed -n 's/description: /&\n/;s/.*\n//p' | head -1)
    echo "Connected Hardware: ${modemLog}"
    
    # Get the TCXO data
    if [[ ${modemLog} == *"MHz"* ]]; then
      tcxoData=$(echo ${modemLog} | awk '{print $3}')
      echo "TCXO Value: ${tcxoData}"
    fi
  echo ""
  fi
  exit 0
fi

#
# OK we know what the modem is, let get the firmware string from the log...
#
clear

echo -e -n "${COL_LIGHT_CYAN}"
echo ' _      _____  _______ 
| | /| / / _ \/ __/ _ \
| |/ |/ / ___/\ \/ // /
|__/|__/_/  /___/____/'
echo -e -n "${COL_NC}${COL_LIGHT_ORANGE}Modem Firmware Update Utility${COL_NC}\n\n"

echo "Found modem:"
tac $(ls -1rt /var/log/pi-star/MMDVM-*.log) | sed -n 's/description: /&\n/;s/.*\n//p' | head -1
echo ""

#
# Download & flash the latest firmware for the type specified in the arg.
#
if [ "$1" ]
then
  script_name=$(basename "$0")
  UAstr="WPSD Modem FW Update Invocation (client side: $script_name)"

  # get the latest FW version from the git repo API
  API="https://wpsd-swd.w0chp.net/api/v1/repos/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/tags"
  VERSION=$(curl -L -A "$UAstr" -s ${API} | jq -r 'map(.name | ltrimstr("v") | select(. != "") | split(".") | map(tonumber)) | max_by(.[]) | join(".")') # jq hackery to always return the greatest ver. # from the json "name:" field since the json results are not ordered that way
  # Trim any leading or trailing whitespace from VERSION
  VERSION=$(echo "$VERSION" | tr -d '[:space:]')
  echo "Retrieving latest available firmmware version number from online repository..."
  sleep 1
  echo -e "    ${INFO} ${COL_LIGHT_BLUE}Found version ${VERSION} for '${1}' (${firmware_file}).${COL_NC}"
  echo ""

  read -n 1 -s -r -p "Press any key to flash the latest '${1}' firmware version (${VERSION}) to this modem, or 'q' to abort..."
  echo ""

  if [[ "$REPLY" =~ [qQ] ]]; then
    echo ""
    echo "Aborting firmware update."
    exit 1
  fi

  BASE_FW_URL="https://wpsd-swd.w0chp.net/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/raw/tag/v${VERSION}/$firmware_file"

  flash_modem() { # the meat!
    local firmware_file="$2"  # Pass the firmware_file as an argument

    echo ""
    echo "Downloading latest '$1' firmware version ($VERSION)..."
    sleep 1
    rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
    mkdir /tmp/mmdvmhshatfirmware 2> /dev/null
    curl -L -s -A "$UAstr" -o "/tmp/mmdvmhshatfirmware/$firmware_file" "$BASE_FW_URL"
    echo -e -n "    ${COL_BRIGHT_GREEN}${TICK}${COL_NC} Complete.${COL_NC}"
    sleep 1

    echo -e "\n\nDownloading MD5 checksum file..."
    sleep 1
    curl -L -s -A "$UAstr" -o "/tmp/mmdvmhshatfirmware/MD5SUMS.txt" "$BASE_FW_URL/../MD5SUMS.txt"
    echo -e -n "    ${COL_BRIGHT_GREEN}${TICK}${COL_NC} Complete.${COL_NC}"
    sleep 1

    # MD5 checksum validation setup
    calculated_md5=$(md5sum "/tmp/mmdvmhshatfirmware/$firmware_file" | awk '{print $1}')
    expected_md5=$(grep "$firmware_file" /tmp/mmdvmhshatfirmware/MD5SUMS.txt | awk '{print $1}')
    echo -e "\n\nValidating file integrity..."
    sleep 1
    if [ -z "$expected_md5" ]; then # not in file!
        echo -e "    \n${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} MD5 checksum value not found for the selected firmware. Aborting."
        exit 1
    fi
    # Perform MD5 validation
    if [ "$calculated_md5" == "$expected_md5" ]; then
        sleep 1
        echo -e -n "    ${TICK} Passed!${COL_NC} File integrity validation succeeded."
        sleep 1
    else
        echo -e "    \n${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} File integrity validation failed for the downloaded firmware. Aborting."
    fi

    # checksum valid; flash!
    echo -e "\n\nPreparing to flash '$1' modem with the latest firmware version ($VERSION) - please wait..."
    sleep 1
    # Start the spinner function in the background
    spinner &
    # Capture the spinner's PID
    SPINNER_PID=$!
    cd /tmp/mmdvmhshatfirmware
    # Download STM32F10X_Lib (only for binary tools)
    if [ ! -d "./STM32F10X_Lib/utils" ]; then
      env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="$UAstr" git clone https://wpsd-swd.w0chp.net/WPSD-SWD/STM32F10X_Lib.git &> /dev/null
    fi
    # Configure vars depending on OS
    if [ $(uname -s) == "Linux" ]; then
	if [ $(uname -m) == "x86_64" ]; then
		DFU_RST="./STM32F10X_Lib/utils/linux64/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/linux64/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/linux64/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/linux64/stm32flash"
	elif [ $(uname -m) == "aarch64" ] ; then
		DFU_RST="./STM32F10X_Lib/utils/rpi32/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/rpi32/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/rpi32/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/rpi32/stm32flash"
	elif [ $(uname -m) == "armv7l" ]; then
		DFU_RST="./STM32F10X_Lib/utils/rpi32/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/rpi32/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/rpi32/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/rpi32/stm32flash"
	elif [ $(uname -m) == "armv6l" ]; then
		DFU_RST="./STM32F10X_Lib/utils/rpi32/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/rpi32/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/rpi32/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/rpi32/stm32flash"
	else
		DFU_RST="./STM32F10X_Lib/utils/linux/upload-reset"
		DFU_UTIL="./STM32F10X_Lib/utils/linux/dfu-util"
		ST_FLASH="./STM32F10X_Lib/utils/linux/st-flash"
		STM32FLASH="./STM32F10X_Lib/utils/linux/stm32flash"
	fi
    fi
    if [ $(uname -s) == "Darwin" ]; then
	DFU_RST="./STM32F10X_Lib/utils/macosx/upload-reset"
	DFU_UTIL="./STM32F10X_Lib/utils/macosx/dfu-util"
	ST_FLASH="./STM32F10X_Lib/utils/macosx/st-flash"
	STM32FLASH="./STM32F10X_Lib/utils/macosx/stm32flash"
    fi
    # Stop MMDVMHost process to free up the serial port
    systemctl stop mmdvmhost.timer >/dev/null 2>&1
    systemctl stop mmdvmhost.service >/dev/null 2>&1
    # Upload the firmware to the modem and place output into buffer for fail/success checking logic
    output=$(eval sudo $STM32FLASH -v -w ${firmware_file} -g 0x0 -R -i 20,-21,21:-20,21 /dev/ttyAMA0  2>&1)
    # Kill the spinner process (make the cursor visible again)
    kill $SPINNER_PID &>/dev/null
    # did we flash successfully?
    flash_successful=false  # Initialize to false
    if [[ $output == *"(100.00%) Done"* && $output == *"0x08000000... done"* ]]; then
      flash_successful=true
    fi
    if $flash_successful; then
      # reset the fw version # in the mmdvmhost logs
      sed -i '/MMDVM protocol version: 1, description:/d; /MMDVM protocol version: 2, description:/d' /var/log/pi-star/MMDVM-*.log  >/dev/null 2>&1
      # re-nit!
      systemctl start mmdvmhost.service >/dev/null 2>&1
      systemctl start mmdvmhost.timer >/dev/null 2>&1
      rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
      echo -e -n "    ${TICK} ${DONE}${COL_NC} '$1' modem firmware flash version $VERSION complete! - Modem reinitialized.\n\n"
      #read -n 1 -s -r -p ""
      #echo ""
      #shutdown -r now
    else
      echo -e "    \n${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Modem flashing failed. Your modem is possibly locked from the vendor. Contact the supplier of your modem for support."
      # Start MMDVMHost processes to free serial port
      systemctl start mmdvmhost.service >/dev/null 2>&1
      systemctl start mmdvmhost.timer >/dev/null 2>&1
      rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
      echo ""
    fi
    exit 0
  }

  flash_modem "${1}" "${firmware_file}"
fi
exit 0

