#!/bin/bash
#
#########################################################
#                                                       #
#            WPSD Modem Firmware Update Utility         #
#                  Chip Cuccio (W0CHP)                  #
#                                                       #
#########################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

if [[ ${SUPP_COL} -eq 0 ]]; then
    COL_NC='\e[0m' # No Color
    BOLD='\e[1m'
    REVERSE='\e[7m'
    COL_LIGHT_GREEN='\e[1;32m'
    COL_BRIGHT_GREEN='\e[1;92m'
    COL_LIGHT_RED='\e[31m'
    COL_BRIGHT_RED='\e[1;31m'
    COL_LIGHT_CYAN='\e[1;36m'
    COL_REG_CYAN='\e[38;5;30m'
    COL_REG_ORANGE='\e[38;5;173m'
    COL_LIGHT_BLUE='\e[1;34m'
    COL_LIGHT_MAGENTA='\e[1;35m'
    COL_LIGHT_YELLOW='\e[1;93m'
    COL_REG_YELLOW='\e[93m'
    INFO="${BOLD}[i]${COL_NC}"
    NOTE="${BOLD}[${COL_LIGHT_YELLOW}!${COL_NC}]"
    TICK="${BOLD}[${COL_LIGHT_GREEN}✓${COL_NC}]"
    CROSS="${BOLD}[${COL_BRIGHT_RED}✗${COL_NC}]"
    DONE="${BOLD}${COL_LIGHT_GREEN}Done!${COL_NC}"
else
    INFO="[i]"
    NOTE="[!]"
    TICK="[✓]"
    CROSS="[✗]"
    DONE="Done!"
fi

#
# Output some useful information when no variables are passed
#
if [ -z "$1" ]
then
  clear
  echo -e "${NOTE} ${COL_LIGHT_YELLOW}Note:${COL_NC} No modem specified!"
  echo ""
  echo "This tool is used to flash/upgrade your MMDVM_HS Hat Modem"
  echo "To use the command, you will need to specify your modem type..."
  echo "Please choose from the list below, and run the command again:"
  echo ""
  echo "To flash HS_HAT (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_hat"
  echo "To flash HS_HAT (12.2880MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_hat-12mhz"
  echo "To flash HS_DUAL_HAT (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_dual_hat"
  echo "To flash HS_DUAL_HAT (12.2880MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_dual_hat-12mhz"
  echo "To flash HS_HAT_AMBE (14.7456MHz TCXO) connected to GPIO, run: pistar-mmdvmhshatflash hs_hat_ambe"
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""
  echo "If you have a different modem..."
  echo ""
  echo "	To flash ZUMspot devices, run: pistar-zumspotflash"
  echo "	To flash BridgeCom SkyBridge devices, run: pistar-skybridgeflash"
  echo "	To flash NANO_DV devices, run: pistar-nanodvflash"
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""
  echo "To DOWNGRADE your MMDVM_HS Hat Modem firmware to an older version..."
  echo ""
  echo "	run: pistar-mmdvmhshatdowngrade"
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""
  echo "IMPORTANT: Please note, that we are not firmware developers, and we offer no support for firmware."
  echo "We simply provide scripts to update the firmware. For actual firmware support,"
  echo "you will need to utilize other support resources from the firmware developers/maintainers or the web".
  echo ""
  echo "--------------------------------------------------------------------------------------------------"
  echo ""

  # Get the friendly name for the chosen Modem according to the dashboard.
  if [ -f '/etc/dstar-radio.mmdvmhost' ]; then
    modemSelected=$(grep 'Hardware=' /etc/dstar-radio.mmdvmhost)
    modemSelected=${modemSelected#*=}

    # Get the user-friendly version of the selected Modem.
    modemSelectedHuman=$(grep value=\"${modemSelected}\" /var/www/dashboard/admin/configure.php | head -n 1)
    modemSelectedHuman=${modemSelectedHuman#*\">}
    modemSelectedHuman=${modemSelectedHuman::-9}

    # Replace "&amp;" with "&" in modemSelectedHuman
    modemSelectedHuman=${modemSelectedHuman//&amp;/&}

    echo "Modem selected in Dashboard: ${modemSelectedHuman}"
  fi

  # Get the Modem info from the Log
  numLogs=$(ls -1rt /var/log/pi-star/MMDVM-*.log | wc -l)
  if [[ ${numLogs} -gt 0 ]]; then
    # Get the physically connected modem from the logs
    modemLog=$(tac $(ls -1rt /var/log/pi-star/MMDVM-*.log) | sed -n 's/description: /&\n/;s/.*\n//p' | head -1)
    echo "Connected Hardware: ${modemLog}"
    
    # Get the TCXO data
    if [[ ${modemLog} == *"MHz"* ]]; then
      tcxoData=$(echo ${modemLog} | awk '{print $3}')
      echo "TCXO Value: ${tcxoData}"
    fi
  echo ""
  fi
  exit 0
fi

#
# OK we know what the modem is, let get the firmware string from the log...
#
clear
echo ""
echo "Found modem:"
tac $(ls -1rt /var/log/pi-star/MMDVM-*.log) | sed -n 's/description: /&\n/;s/.*\n//p' | head -1
echo ""

#
# Download & flash the latest firmware for the type specified in the arg.
#
if [ "$1" ]
then
  script_name=$(basename "$0")
  UAstr="WPSD Modem FW Update Invocation (client side: $script_name)"
  API="https://wpsd-swd.w0chp.net/api/v1/repos/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/tags"
  VERSION=$(curl -L -A "$UAstr" -s ${API} | jq -r 'map(.name | ltrimstr("v") | select(. != "") | split(".") | map(tonumber)) | max_by(.[]) | join(".")') # jq hackery to always return the greatest ver. # from the json "name:" field since the json results are not ordered that way
  # Trim any leading or trailing whitespace from VERSION
  VERSION=$(echo "$VERSION" | tr -d '[:space:]')

  echo "Retrieving latest available firmmware version number from online repository..."
  sleep 2
  echo -e "${INFO} ${COL_LIGHT_BLUE}Found version ${VERSION}.${COL_NC}"
  echo ""

  read -n 1 -s -r -p "Press any key to flash the latest '${1}' firmware version (${VERSION}) to this modem, or 'q' to abort..."
  echo ""

  if [[ "$REPLY" =~ [qQ] ]]; then
    echo ""
    echo "Aborting firmware update."
    exit 1
  fi

  BASE_FW_URL="https://wpsd-swd.w0chp.net/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/raw/tag/v${VERSION}/scripts"

  flash_modem() {
    echo ""
    echo "Downloading latest '$1' firmware version ($VERSION)..."
    rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null
    mkdir /tmp/mmdvmhshatfirmware 2> /dev/null
    curl -L -s -A "$UAstr" -o /tmp/mmdvmhshatfirmware/flash.sh "$BASE_FW_URL/$2"
    chmod +x /tmp/mmdvmhshatfirmware/flash.sh
    cd /tmp/mmdvmhshatfirmware
    sleep 2
    echo "Flashing '$1' modem with the latest firmware version ($VERSION) - please wait..."
    output=$(./flash.sh 2>&1)
  
    flash_successful=false  # Initialize to false
    if [[ $output == *"(100.00%) Done"* && $output == *"0x08000000... done"* ]]; then
      flash_successful=true
    fi
    rm -rf /tmp/mmdvmhshatfirmware 2> /dev/null

    if $flash_successful; then
      echo ""
      echo -e -n "${TICK} ${DONE}${COL_NC} '$1' modem flash complete - press any key to reboot your WPSD system..."
      read -n 1 -s -r -p ""
      echo ""
      shutdown -r now
    else
      echo -e "\n${CROSS} ${COL_BRIGHT_RED}ERROR:${COL_NC} Modem flashing failed. Your modem is possibly locked from the vendor. Contact the supplier of your modem for support."
      echo ""
    fi
    exit 0
  }

  case ${1} in
    hs_hat)
      flash_modem "${1}" "install_fw_hshat.sh"
      ;;
    hs_hat-12mhz)
      flash_modem "${1}" "install_fw_hshat-12mhz.sh"
      ;;
    hs_dual_hat)
      flash_modem "${1}" "install_fw_hsdualhat.sh"
      ;;
    hs_dual_hat-12mhz)
      flash_modem "${1}" "install_fw_hsdualhat-12mhz.sh"
      ;;
    hs_hat_ambe)
      flash_modem "${1}" "install_fw_d2rg_mmdvmhs.sh"
      ;;
    *)
      # Unrecognized modem choice
      echo "Your choice of ${1} modem is not supported in this program."
      exit 1
      ;;
  esac
fi
exit 0
