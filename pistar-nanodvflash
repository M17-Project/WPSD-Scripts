#!/bin/bash
#
###############################################################################
#                                                                             #
#                      Pi-Star Firmware Update Tool                           #
#                                                                             #
#    Version 1.4, Code, Design and Development by Andy Taylor (MW0MWZ)        #
#                          and Chip Cuccio (W0CHP)                            #
#                                                                             #
#                 Make it simple to update the Firmware                       #
#                                                                             #
###############################################################################
#
if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi
#
# Output some useful information when no variables are passed
#
if [ -z "$1" ]
then
  clear
  echo ""
  echo "This tool is used to flash your NANO_DV Modem"
  echo "to use the command, you will need to specify your modem type..."
  echo "please choose from the list below..."
  echo ""
  echo "To flash a NANO_DV connected to GPIO by BG4TGO, run:    pistar-nanodvflash pi"
  echo "To flash a NANO_DV connected to USB by BG4TGO, run:     pistar-nanodvflash usb"
  echo ""
  echo "To flash ZUMSpot devices, run: pistar-zumspotflash"
  echo "To flash BridgeCom SkyBridge devices, run: pistar-skybridgeflash"
  echo "To flash MMDVM_HS Hat devices by DB9MAT & DF2ET, etc., run: pistar-mmdvmhshatflash"
  echo ""
  echo "IMPORTANT: Please note, that we are not firmware developers, and we offer no support for firmware."
  echo "We simply provide scripts to update the firmware. For actual firmware support,"
  echo "you will need to utilize other support resources from the firmware developers/maintainers or the web".
  echo ""
  # Get the pretty name for the chosen Modem according to the dashboard.
  if [ -f '/etc/dstar-radio.mmdvmhost' ]; then
    modemSelected=$(grep 'Hardware=' /etc/dstar-radio.mmdvmhost)
    modemSelected=${modemSelected#*=}

    # Get the user-friendly version of the selected Modem.
    modemSelectedHuman=$(grep value=\"${modemSelected}\" /var/www/dashboard/admin/configure.php | head -n 1)
    modemSelectedHuman=${modemSelectedHuman#*\">}
    modemSelectedHuman=${modemSelectedHuman::-9}

    # Replace "&amp;" with "&" in modemSelectedHuman
    modemSelectedHuman=${modemSelectedHuman//&amp;/&}

    echo "Selected Modem:     ${modemSelectedHuman}"
  fi

  # Get the Modem info from the Log
  numLogs=$(ls -1rt /var/log/pi-star/MMDVM-*.log | wc -l)
  if [[ ${numLogs} -gt 0 ]]; then
    # Get the physically connected modem from the logs
    modemLog=$(tac $(ls -1rt /var/log/pi-star/MMDVM-*.log) | sed -n 's/description: /&\n/;s/.*\n//p' | head -1)
    echo "Connected Hardware: ${modemLog}"

    # Get the TCXO data
    if [[ ${modemLog} == *"MHz"* ]]; then
      tcxoData=$(echo ${modemLog} | awk '{print $3}')
      echo "TCXO Value:         ${tcxoData}"
    fi
  fi
  exit 0
fi
#
# OK we know what the modem is, let get the firmware string from the log...
#
tac $(ls -1rt /var/log/pi-star/MMDVM-*.log | tail -n1 ) | grep "protocol" -m 1 | sed -n 's/description: /&\n/;s/.*\n//p'
read -n 1 -s -r -p "Press any key to write the ${1} firmware to this modem or Ctrl-C to quit..."
echo ""
#
# Download the correct firmware
#
if [ "$1" ]
then
  API="https://wpsd-swd.w0chp.net/api/v1/repos/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/tags"
  VERSION=$(curl -L -A "$UAstr" -s ${API} | jq -r 'map(.name | ltrimstr("v") | split(".") | map(tonumber)) | max_by(.[]) | join(".")') # jq hackery to always return the greatest ver. # from the json "name:" field since the json results are not ordered that way
  # Trim any leading or trailing whitespace from VERSION
  VERSION=$(echo "$VERSION" | tr -d '[:space:]')
  script_name=$(basename "$0")
  UAstr="WPSD Modem FW Update Invocation (client side: $script_name)"
  BASE_FW_URL="https://wpsd-swd.w0chp.net/WPSD-SWD/MMDVM_HS-Firmware_Latest-Compiled/raw/tag/v${VERSION}/scripts"
  case ${1} in
  pi)
    # Flashing GPIO Modem
    rm -rf /tmp/nanodvfirmware 2> /dev/null
    mkdir /tmp/nanodvfirmware 2> /dev/null
    echo "Flashing your ${1} modem to the latest version (${VERSION})..."
    curl -L -s -A "$UAstr" -o /tmp/nanodvfirmware/flash.sh "$BASE_FW_URL/install_fw_nanodv_npi.sh"
    chmod +x /tmp/nanodvfirmware/flash.sh
    cd  /tmp/nanodvfirmware
    ./flash.sh
    echo ""
    rm -rf /tmp/nanodvfirmware 2> /dev/null
    read -n 1 -s -r -p "Flashing your ${1} modem complete, press any key to reboot your WPSD system..."
    shutdown -r now
    exit 0
  ;;
  usb)
    # Flashing USB Modem
    rm -rf /tmp/nanodvfirmware 2> /dev/null
    mkdir /tmp/nanodvfirmware 2> /dev/null
    echo "Flashing your ${1} modem to the latest version (${VERSION})..."
    curl -L -s -A "$UAstr" -o /tmp/nanodvfirmware/flash.sh "$BASE_FW_URL/install_fw_nanodv_usb.sh"
    chmod +x /tmp/nanodvfirmware/flash.sh
    cd  /tmp/nanodvfirmware
    ./flash.sh
    echo ""
    rm -rf /tmp/nanodvfirmware 2> /dev/null
    read -n 1 -s -r -p "Flashing your ${1} modem complete, press any key to reboot your WPSD system..."
    shutdown -r now
    exit 0
  ;;
  *)
    # Un-recognised modem choice
    echo "Your Choice of ${1} modem is not supported by this update tool"
    exit 1
  ;;
  esac
fi
exit 0
