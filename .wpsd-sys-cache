#!/bin/bash

### Cache HW and other pertinent information for a file used across the software & session storage

# release/config init:
INI_FILE="/etc/WPSD-release"
if [ ! -f "$INI_FILE" ] ; then
    touch "INI_FILE"
fi

PlatDet="/usr/local/sbin/.wpsd-platform-detect"
# Function to perform the mappings
map_hardware() {
    output=$(eval "$PlatDet") 
    if echo "$output" | grep -q "NanoPi"; then
        echo "NanoPi"
    elif echo "$output" | grep -q "Raspberry"; then
        echo "RaspberryPi"
    elif echo "$output" | grep -q "Odroid"; then
        echo "Odroid"
    elif echo "$output" | grep -q "sun8i-based Pi Clone"; then
        echo "RPiClone"
    elif echo "$output" | grep -q "Samsung Artik"; then
        echo "Samsung-Artik"
    elif echo "$output" | grep -q "Orange Pi"; then
        echo "OrangePi"
    else
        echo "$output"  # Return the original value if no mapping is found
    fi
}

# Function to check if any of the specified keys are empty
check_empty_keys() {
    local empty_keys=0

    if [ -f "$INI_FILE" ]; then
        for key in ircddbgateway MMDVMHost kernel Hardware Platform iface ModemMode ModemType ModemFW TXCO ControllerType ProcNum UUID ConfUpdReqd CallLookupProvider Callsign WPSD_Ver; do
            if ! grep -qE "^${key} = .+" "$INI_FILE"; then
                empty_keys=1
                break
            fi
        done
    fi

    echo "$empty_keys"
}

# Function to check if the specified keys exist in the INI file
check_key_existence() {
    local missing_keys=0

    if [ -f "$INI_FILE" ]; then
        for key in ircddbgateway MMDVMHost kernel Hardware Platform iface ModemMode ModemType ModemFW TCXO ControllerType ProcNum UUID ConfUpdReqd CallLookupProvider Callsign WPSD_Ver; do
            if ! grep -qE "^${key} =" "$INI_FILE"; then
                missing_keys=1
                break
            fi
        done
    else
        missing_keys=1
    fi

    echo "$missing_keys"
}

if [ ! -f "$INI_FILE" ] || [ "$(check_key_existence)" -eq 1 ] || [ "$(check_empty_keys)" -eq 1 ]; then
    cat > "$INI_FILE" <<EOF
[WPSD]
ircddbgateway = 
MMDVMHost = 
kernel = 
Hardware = $(map_hardware "$(eval "$PlatDet")")
Platform = 
iface = 
ModemMode = 
ModemType = 
ModemFW =
TCXO =
ControllerType = 
ProcNum = 
UUID = 
ConfUpdReqd = 2023010400
CallLookupProvider = QRZ
Callsign = 
WPSD_Ver = 
EOF
fi

# update HW key:
HW_var=$(map_hardware "$(eval "$PlatDet")")
sed -i "/Hardware/c Hardware = ${HW_var}" "$INI_FILE"

# bins are sometimes built in a batch...use MMDVMHost ver as Dstar bin git/date vers...
getVer=$( MMDVMHost -v | cut -d' ' -f 3- )
sed -i "/^ircddbgateway.*/c ircddbgateway = ${getVer}" "$INI_FILE"
sed -i "/MMDVMHost/c MMDVMHost = ${getVer}" "$INI_FILE"

# proc count
countProcs=$(grep -c ^processor /proc/cpuinfo)
if ! grep -w 'ProcNum' "$INI_FILE" > /dev/null; then
    sed -i "/Hardware = /a ProcNum = ${countProcs}" "$INI_FILE"
else
    sed -i "/ProcNum/c ProcNum = ${countProcs}" "$INI_FILE"
fi

# active net iface
activeIface=$(route | head -3 | tail -1 | awk '{print $8}')
if ! grep -w 'iface' "$INI_FILE" > /dev/null; then
    sed -i "/Hardware = /a iface = ${activeIface}" "$INI_FILE"
else
    sed -i "/iface/c iface = ${activeIface}" "$INI_FILE"
fi

# kernel ver.
KernelVer=`uname -r`
sed -i "/kernel/c kernel = ${KernelVer}" "$INI_FILE"

if ! grep -w 'Platform' "$INI_FILE" > /dev/null; then
    sed -i "/Hardware = /a Platform = $(eval "$PlatDet")" "$INI_FILE"
else
    sed -i "/Platform/c Platform = $(eval "$PlatDet")" "$INI_FILE"
fi

# uuid
GU=$( cat /proc/cpuinfo | grep Serial | cut -d ' ' -f 2 )
sed -i "/UUID =/c\\UUID = ${GU}" "$INI_FILE"

# migrate callsign info to last line of "$INI_FILE"
CALL=$( grep -oP '^Callsign=\K.*' /etc/mmdvmhost | head -n 1 )
if ! grep -w 'Callsign' "$INI_FILE" > /dev/null; then
    echo "Callsign = ${CALL}" >> "$INI_FILE"
else
    sed -i "/Callsign =/c Callsign = ${CALL}" "$INI_FILE"
fi
callsign_count=$(grep -c "Callsign =" "$INI_FILE")
if [ "$callsign_count" -gt 1 ]; then
  sed -i '/^Callsign =/d' "$INI_FILE"
  echo "Callsign = ${CALL}" >> "$INI_FILE"
fi

# Cache Modem Mode
if grep -q 'Duplex=1' /etc/mmdvmhost ; then
    ModemMode="Duplex"
else
    ModemMode="Simplex"
fi
if ! grep -w 'ModemMode' "$INI_FILE" > /dev/null; then
    sed -i "/iface = /a ModemMode = ${ModemMode}" "$INI_FILE"
else
    sed -i "/ModemMode =/c ModemMode = ${ModemMode}" "$INI_FILE"
fi

# Cache modem and controller types
if [ -f '/etc/dstar-radio.mmdvmhost' ]; then
    ControllerType="MMDVM"
    ModemType=$( grep Hardware /etc/dstar-radio.mmdvmhost | sed 's/Hardware=//' )
    if ! grep -w 'ModemType' "$INI_FILE" > /dev/null; then
        sed -i "/ModemMode = /a ModemType = ${ModemType}" "$INI_FILE"
    else
        sed -i "/ModemType =/c ModemType = ${ModemType}" "$INI_FILE"
    fi
    if ! grep -w 'ControllerType' "$INI_FILE" > /dev/null; then
        sed -i "/ModemType /a ControllerType = ${ControllerType}" "$INI_FILE"
    else
        sed -i "/ControllerType =/c ControllerType = ${ControllerType}" "$INI_FILE"
    fi
fi

# modem fw & tcxo
LOG_MMDVM_NOW="/var/log/pi-star/MMDVM-$(date -u +'%Y-%m-%d').log"
LOG_MMDVM_PREVIOUS="/var/log/pi-star/MMDVM-$(date -u --date="yesterday" +'%Y-%m-%d').log"
LOG_SEARCH_STRING="MMDVM protocol version"
MODEM_FIRMWARE=""
# Loop until the search string is found in either today's or yesterday's log
LOG_LINE=""
attempts=0
max_attempts=10
while [ -z "$LOG_LINE" ] && [ $attempts -lt $max_attempts ]; do
    LOG_LINE=$(grep "$LOG_SEARCH_STRING" "$LOG_MMDVM_NOW" | tail -1)
    if [ -z "$LOG_LINE" ]; then
        LOG_LINE=$(grep "$LOG_SEARCH_STRING" "$LOG_MMDVM_PREVIOUS" | tail -1)
    fi
    if [ -z "$LOG_LINE" ]; then
        sleep 1
    fi
    attempts=$((attempts + 1))
done

# Extract the modem name and version directly from the description
# Handle DVMEGA format
if [[ "$LOG_LINE" =~ description:\ (DVMEGA\ ([^ ]+)) ]]; then
    MODEM_FIRMWARE="DVMEGA-v.${BASH_REMATCH[2]}"
# Handle MMDVM_MDO ADF7021 with version and date
elif [[ "$LOG_LINE" =~ description:\ (MMDVM_MDO)\ ADF7021\ v([0-9.]+)\ ([0-9]{8}) ]]; then
    MODEM_FIRMWARE="${BASH_REMATCH[1]}-v.${BASH_REMATCH[2]}_${BASH_REMATCH[3]}"
# Handle MMDVM with version in parentheses
elif [[ "$LOG_LINE" =~ description:\ (MMDVM\ ([0-9]+)) ]]; then
    MODEM_FIRMWARE="MMDVM-v.${BASH_REMATCH[2]}"
# Handle RB modems
elif [[ "$LOG_LINE" =~ description:\ MMDVM\ ([^ ]+)\([0-9]+\)\ ([0-9]{8}) ]]; then
    MODEM_FIRMWARE="${BASH_REMATCH[1]}-v.${BASH_REMATCH[2]}"
# Handle OpenGD77_HS and OpenGD77 Hotspot formats
elif [[ "$LOG_LINE" =~ description:\ (OpenGD77(_HS| Hotspot))\ v?([0-9.]+) ]]; then
    MODEM_FIRMWARE="OpenGD77_HS-v.${BASH_REMATCH[3]}"
# all others (HATs, HS', etc)
elif [[ "$LOG_LINE" =~ description:\ ([^ ]+)-v?([0-9.]+) ]]; then
    MODEM_FIRMWARE="${BASH_REMATCH[1]}-v.${BASH_REMATCH[2]}"
fi

# Fallback to ModemType if MODEM_FIRMWARE is empty
if [ -z "$MODEM_FIRMWARE" ]; then
    MODEM_FIRMWARE="${ModemType}"
fi

MODEM_TCXO_FREQ=""
# TCXO frequency
if [[ "$LOG_LINE" == *"MHz"* ]]; then
    MODEM_TCXO_FREQ=$(echo "$LOG_LINE" | grep -oP '\d{2,3}\.\d{3,4}\s?MHz')
    MODEM_TCXO_FREQ=$(echo "$MODEM_TCXO_FREQ" | sed 's/MHz/ MHz/')
fi

# Fallback if  is empty
if [ -z "$MODEM_TCXO_FREQ" ]; then
    MODEM_TCXO_FREQ="Updating. Please wait."
fi

# Update the release file
if ! grep -w 'ModemFW' "$INI_FILE" > /dev/null; then
    sed -i "/ModemType = /a ModemFW = ${MODEM_FIRMWARE}" "$INI_FILE"
else
    sed -i "/ModemFW =/c ModemFW = ${MODEM_FIRMWARE}" "$INI_FILE"
fi
if ! grep -w 'TCXO' "$INI_FILE" > /dev/null; then
    sed -i "/ModemFW = /a TCXO = ${MODEM_TCXO_FREQ}" "$INI_FILE"
else
    sed -i "/TCXO =/c TCXO = ${MODEM_TCXO_FREQ}" "$INI_FILE"
fi

# add / update WPSD version hash to "$INI_FILE"
gitBranch=$(git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git symbolic-ref --short HEAD)
WPSDver=$( git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git rev-parse --short=10 ${gitBranch} )
if ! grep -w 'WPSD_Ver' "$INI_FILE" > /dev/null; then
    sed -i "/Callsign =/a WPSD_Ver = ${WPSDver}" "$INI_FILE"
else
    sed -i "/WPSD_Ver/c WPSD_Ver = ${WPSDver}" "$INI_FILE"
fi

# cleanup legacy entries
if [ $(grep -c 'MMDVMHost' "$INI_FILE") -gt 2 ]; then
    sed -i '/MMDVM/d' "$INI_FILE"
    sed -i "/Version = /a MMDVMHost = " "$INI_FILE"
fi
if grep -q "OrangePiZero" "$INI_FILE"; then
    sed -i 's/OrangePiZero/OrangePi/g' "$INI_FILE" 
fi
if grep -q "Hardware = RPi" "$INI_FILE"; then
    sed -i 's/Hardware = RPi/Hardware = RaspberryPi/g' "$INI_FILE" 
fi

# cleanup last line..
#sed -i '${/^$/d}' "$INI_FILE"

