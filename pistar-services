#!/bin/bash

# Pi-Star services handler, by F1RMB and enhanced by W0CHP
# version 1.2

if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

# Display services active status
function status_services() {
    services=("pistar-upnp.service" "pistar-watchdog.timer" "pistar-watchdog.service" "nextiondriver.service" "mmdvmhost.service" "dstarrepeater.service" "ircddbgateway.service" "dapnetgateway.service" "dmrgateway.service"  "p25gateway.service" "p25parrot.service" "nxdngateway.service" "m17gateway.service" "nxdnparrot.service" "dgidgateway.service" "ysfgateway.service" "ysfparrot.service" "ysf2dmr.service" "ysf2p25.service" "ysf2nxdn.service" "dmr2ysf.service" "dmr2nxdn.service" "nxdn2dmr.service" "aprsgateway.service" "gpsd.service" "timeserver.service" "cron.service" "pistar-remote.timer" "pistar-remote.service")
    
    for s in "${services[@]}"; do
	status=$(systemctl is-active "$s" | tr [a-z] [A-Z])
	echo "Service $s -> $status"
    done
}

# Nextion enabled?
NextionEnabled=$(grep -c 'Display=Nextion' /etc/mmdvmhost)

# Start/Stop all the services...
# $1 == FULLSTOP
function stop_services()
{
    [[ $SHLVL -gt 2 ]] && 
        # Mount the disk RW only if NOT called from installer (or another) script
        mount -o remount,rw /
    
    echo -ne "Stopping Pi-Star services..."

    if [ "$1" == "FULLSTOP" ]; then
	    # Prevent cron to restart services
	    systemctl is-active --quiet cron.service && systemctl stop cron.service
    fi
   
    if [ "$(grep "pistar-upnp.service" /etc/crontab | cut -c 1)" != '#' ]; then
        systemctl stop pistar-upnp.service > /dev/null 2>&1
    fi
    systemctl stop pistar-watchdog.timer > /dev/null 2>&1
    systemctl stop pistar-watchdog.service > /dev/null 2>&1
    systemctl stop pistar-remote.timer > /dev/null 2>&1
    systemctl stop pistar-remote.service > /dev/null 2>&1
    systemctl stop mmdvmhost.service > /dev/null 2>&1
    systemctl stop dstarrepeater.service > /dev/null 2>&1
    sleep 2
    systemctl stop ircddbgateway.service > /dev/null 2>&1
    systemctl stop dapnetgateway.service > /dev/null 2>&1
    systemctl stop p25gateway.service > /dev/null 2>&1
    systemctl stop p25parrot.service > /dev/null 2>&1
    systemctl stop m17gateway.service > /dev/null 2>&1
    systemctl stop nxdngateway.service > /dev/null 2>&1
    systemctl stop nxdnparrot.service > /dev/null 2>&1
    systemctl stop dgidgateway.service > /dev/null 2>&1
    systemctl stop ysfgateway.service > /dev/null 2>&1
    systemctl stop ysfparrot.service > /dev/null 2>&1
    systemctl stop ysf2dmr.service > /dev/null 2>&1
    systemctl stop ysf2p25.service > /dev/null 2>&1
    systemctl stop ysf2nxdn.service > /dev/null 2>&1
    systemctl stop dmr2ysf.service > /dev/null 2>&1
    systemctl stop dmr2nxdn.service > /dev/null 2>&1
    systemctl stop dmrgateway.service > /dev/null 2>&1
    systemctl stop nxdn2dmr.service > /dev/null 2>&1
    systemctl stop aprsgateway.service > /dev/null 2>&1
    systemctl stop gpsd.service > /dev/null 2>&1
    systemctl stop timeserver.service > /dev/null 2>&1
    if [[ ${NextionEnabled} -eq 1 ]]; then
	systemctl stop nextiondriver.service > /dev/null 2>&1
    fi
    echo -e "\b\b\b: DONE.\b"
    # Mount the disk RO
    if [ x"$REMOUNT_RO" != "xNO" ]; then
	/bin/sync
	/bin/sync
	/bin/sync
	mount -o remount,ro /
    fi
}

function start_services()
{
    [[ $SHLVL -gt 2 ]] &&
        # Mount the disk RW only if NOT called from installer (or another) script
        mount -o remount,rw /
    
    echo -ne "Starting Pi-Star services..."
    
    systemctl daemon-reload > /dev/null 2>/dev/null # Restart Systemd to account for any service changes 
    if [[ ${NextionEnabled} -eq 1 ]]; then
	systemctl start nextiondriver.service > /dev/null 2>&1
    fi
    systemctl start gpsd.service > /dev/null 2>&1
    systemctl start aprsgateway.service > /dev/null 2>&1
    systemctl start dapnetgateway.service > /dev/null 2>&1
    systemctl start p25gateway.service > /dev/null 2>&1
    systemctl start p25parrot.service > /dev/null 2>&1
    systemctl start nxdngateway.service > /dev/null 2>&1
    systemctl start m17gateway.service > /dev/null 2>&1
    systemctl start nxdnparrot.service > /dev/null 2>&1
    systemctl start ysfgateway.service > /dev/null 2>&1
    systemctl start ysfparrot.service > /dev/null 2>&1
    systemctl start ysf2dmr.service > /dev/null 2>&1
    systemctl start ysf2p25.service > /dev/null 2>&1
    systemctl start ysf2nxdn.service > /dev/null 2>&1
    systemctl start dmr2ysf.service > /dev/null 2>&1
    systemctl start dmr2nxdn.service > /dev/null 2>&1
    systemctl start nxdn2dmr.service > /dev/null 2>&1
    systemctl start timeserver.service > /dev/null 2>&1
    systemctl start mmdvmhost.service > /dev/null 2>&1
    systemctl start dgidgateway.service > /dev/null 2>&1 # this MMDVM loses link if started before MMDVMhost
    systemctl start dmrgateway.service > /dev/null 2>&1
    systemctl start dstarrepeater.service > /dev/null 2>&1
    ## Now managed by MMDVMHost service file
    ##systemctl start ircddbgateway.service > /dev/null 2>&1
    systemctl start pistar-watchdog.service > /dev/null 2>&1
    systemctl start pistar-watchdog.timer > /dev/null 2>&1
    systemctl start pistar-remote.service > /dev/null 2>&1
    systemctl start pistar-remote.timer > /dev/null 2>&1
    if [ "$(grep "pistar-upnp.service" /etc/crontab | cut -c 1)" != '#' ]; then
        systemctl start pistar-upnp.service > /dev/null 2>&1
    fi
    
    # Restart cron service if fullstop was used before
    systemctl is-active --quiet cron.service || systemctl start cron.service

    echo -e "\b\b\b: DONE.\b"
    # Mount the disk RO
    if [ x"$REMOUNT_RO" != "xNO" ]; then
	/bin/sync
	/bin/sync
	/bin/sync
	mount -o remount,ro /
    fi
}

case "$1" in
    start)
        start_services
        ;;
    
    stop)
        stop_services
        ;;
    
    fullstop)
        stop_services "FULLSTOP"
        ;;
    
    status)
	status_services
	;;
    
    restart)
        stop_services
        start_services
        ;;
    
    *)
        echo -e "`basename $0` {start|stop|fullstop|restart}\n"
        exit 1
        ;;
esac

exit 0
